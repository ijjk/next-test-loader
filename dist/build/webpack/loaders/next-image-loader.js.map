{"version":3,"sources":["../../../../build/webpack/loaders/next-image-loader.js"],"names":["BLUR_IMG_SIZE","BLUR_QUALITY","VALID_BLUR_EXT","nextImageLoader","content","imageLoaderSpan","currentTraceSpan","traceChild","traceAsyncFn","isServer","isDev","assetPrefix","loaderUtils","getOptions","context","rootContext","opts","interpolatedName","interpolateName","outputPath","extension","imageSizeSpan","imageSize","traceFn","blurDataURL","includes","prefix","url","URL","searchParams","set","href","slice","length","resizeOperationOpts","width","height","type","resizeImageSpan","resizedImage","blurDataURLSpan","toString","stringifiedData","JSON","stringify","src","emitFile","raw"],"mappings":"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","sourcesContent":["import loaderUtils from 'next/dist/compiled/loader-utils'\nimport sizeOf from 'image-size'\nimport { processBuffer } from '../../../server/lib/squoosh/main'\n\nconst BLUR_IMG_SIZE = 8\nconst BLUR_QUALITY = 70\nconst VALID_BLUR_EXT = ['jpeg', 'png', 'webp']\n\nfunction nextImageLoader(content) {\n  const imageLoaderSpan = this.currentTraceSpan.traceChild('next-image-loader')\n  return imageLoaderSpan.traceAsyncFn(async () => {\n    const { isServer, isDev, assetPrefix } = loaderUtils.getOptions(this)\n    const context = this.rootContext\n    const opts = { context, content }\n    const interpolatedName = loaderUtils.interpolateName(\n      this,\n      '/static/image/[path][name].[hash].[ext]',\n      opts\n    )\n    const outputPath = '/_next' + interpolatedName\n\n    let extension = loaderUtils.interpolateName(this, '[ext]', opts)\n    if (extension === 'jpg') {\n      extension = 'jpeg'\n    }\n\n    const imageSizeSpan = imageLoaderSpan.traceChild('image-size-calculation')\n    const imageSize = imageSizeSpan.traceFn(() => sizeOf(content))\n    let blurDataURL\n\n    if (VALID_BLUR_EXT.includes(extension)) {\n      if (isDev) {\n        const prefix = 'http://localhost'\n        const url = new URL('/_next/image', prefix)\n        url.searchParams.set('url', assetPrefix + outputPath)\n        url.searchParams.set('w', BLUR_IMG_SIZE)\n        url.searchParams.set('q', BLUR_QUALITY)\n        blurDataURL = url.href.slice(prefix.length)\n      } else {\n        // Shrink the image's largest dimension\n        const resizeOperationOpts =\n          imageSize.width >= imageSize.height\n            ? { type: 'resize', width: BLUR_IMG_SIZE }\n            : { type: 'resize', height: BLUR_IMG_SIZE }\n\n        const resizeImageSpan = imageLoaderSpan.traceChild('image-resize')\n        const resizedImage = await resizeImageSpan.traceAsyncFn(() =>\n          processBuffer(content, [resizeOperationOpts], extension, BLUR_QUALITY)\n        )\n        const blurDataURLSpan = imageLoaderSpan.traceChild(\n          'image-base64-tostring'\n        )\n        blurDataURL = blurDataURLSpan.traceFn(\n          () =>\n            `data:image/${extension};base64,${resizedImage.toString('base64')}`\n        )\n      }\n    }\n\n    const stringifiedData = imageLoaderSpan\n      .traceChild('image-data-stringify')\n      .traceFn(() =>\n        JSON.stringify({\n          src: outputPath,\n          height: imageSize.height,\n          width: imageSize.width,\n          blurDataURL,\n        })\n      )\n\n    if (!isServer) {\n      this.emitFile(interpolatedName, content, null)\n    }\n\n    return `export default ${stringifiedData};`\n  })\n}\nexport const raw = true\nexport default nextImageLoader\n"]}