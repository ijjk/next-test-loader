{"version":3,"sources":["build/webpack/loaders/next-serverless-loader/index.ts"],"sourcesContent":["import devalue from 'next/dist/compiled/devalue'\nimport escapeRegexp from 'next/dist/compiled/escape-string-regexp'\nimport { join } from 'path'\nimport { parse } from 'querystring'\nimport { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { API_ROUTE } from '../../../../lib/constants'\nimport { isDynamicRoute } from '../../../../shared/lib/router/utils'\nimport { __ApiPreviewProps } from '../../../../server/api-utils'\nimport {\n  BUILD_MANIFEST,\n  ROUTES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n} from '../../../../shared/lib/constants'\nimport { trace } from '../../../../telemetry/trace'\n\nexport type ServerlessLoaderQuery = {\n  page: string\n  distDir: string\n  absolutePagePath: string\n  absoluteAppPath: string\n  absoluteDocumentPath: string\n  absoluteErrorPath: string\n  absolute404Path: string\n  buildId: string\n  assetPrefix: string\n  generateEtags: string\n  poweredByHeader: string\n  canonicalBase: string\n  basePath: string\n  runtimeConfig: string\n  previewProps: string\n  loadedEnvFiles: string\n  i18n: string\n}\n\nconst nextServerlessLoader: webpack.loader.Loader = function () {\n  const loaderSpan = trace('next-serverless-loader')\n  return loaderSpan.traceFn(() => {\n    const {\n      distDir,\n      absolutePagePath,\n      page,\n      buildId,\n      canonicalBase,\n      assetPrefix,\n      absoluteAppPath,\n      absoluteDocumentPath,\n      absoluteErrorPath,\n      absolute404Path,\n      generateEtags,\n      poweredByHeader,\n      basePath,\n      runtimeConfig,\n      previewProps,\n      loadedEnvFiles,\n      i18n,\n    }: ServerlessLoaderQuery =\n      typeof this.query === 'string' ? parse(this.query.substr(1)) : this.query\n\n    const buildManifest = join(distDir, BUILD_MANIFEST).replace(/\\\\/g, '/')\n    const reactLoadableManifest = join(\n      distDir,\n      REACT_LOADABLE_MANIFEST\n    ).replace(/\\\\/g, '/')\n    const routesManifest = join(distDir, ROUTES_MANIFEST).replace(/\\\\/g, '/')\n\n    const escapedBuildId = escapeRegexp(buildId)\n    const pageIsDynamicRoute = isDynamicRoute(page)\n\n    const encodedPreviewProps = devalue(\n      JSON.parse(previewProps) as __ApiPreviewProps\n    )\n\n    const envLoading = `\n      const { processEnv } = require('@next/env')\n      processEnv(${Buffer.from(loadedEnvFiles, 'base64').toString()})\n    `\n\n    const runtimeConfigImports = runtimeConfig\n      ? `\n        const { setConfig } = require('next/config')\n      `\n      : ''\n\n    const runtimeConfigSetter = runtimeConfig\n      ? `\n        const runtimeConfig = ${runtimeConfig}\n        setConfig(runtimeConfig)\n      `\n      : 'const runtimeConfig = {}'\n\n    if (page.match(API_ROUTE)) {\n      return `\n        ${envLoading}\n        ${runtimeConfigImports}\n        ${\n          /*\n            this needs to be called first so its available for any other imports\n          */\n          runtimeConfigSetter\n        }\n        import 'next/dist/server/node-polyfill-fetch'\n        import routesManifest from '${routesManifest}'\n\n        import { getApiHandler } from 'next/dist/build/webpack/loaders/next-serverless-loader/api-handler'\n\n        const combinedRewrites = Array.isArray(routesManifest.rewrites)\n          ? routesManifest.rewrites\n          : []\n\n        if (!Array.isArray(routesManifest.rewrites)) {\n          combinedRewrites.push(...routesManifest.rewrites.beforeFiles)\n          combinedRewrites.push(...routesManifest.rewrites.afterFiles)\n          combinedRewrites.push(...routesManifest.rewrites.fallback)\n        }\n\n        const apiHandler = getApiHandler({\n          pageModule: require(\"${absolutePagePath}\"),\n          rewrites: combinedRewrites,\n          i18n: ${i18n || 'undefined'},\n          page: \"${page}\",\n          basePath: \"${basePath}\",\n          pageIsDynamic: ${pageIsDynamicRoute},\n          encodedPreviewProps: ${encodedPreviewProps}\n        })\n        export default apiHandler\n      `\n    } else {\n      return `\n      import 'next/dist/server/node-polyfill-fetch'\n      import routesManifest from '${routesManifest}'\n      import buildManifest from '${buildManifest}'\n      import reactLoadableManifest from '${reactLoadableManifest}'\n\n      ${envLoading}\n      ${runtimeConfigImports}\n      ${\n        // this needs to be called first so its available for any other imports\n        runtimeConfigSetter\n      }\n      import { getPageHandler } from 'next/dist/build/webpack/loaders/next-serverless-loader/page-handler'\n\n      const documentModule = require(\"${absoluteDocumentPath}\")\n\n      const appMod = require('${absoluteAppPath}')\n      let App = appMod.default || appMod.then && appMod.then(mod => mod.default);\n\n      const compMod = require('${absolutePagePath}')\n\n      const Component = compMod.default || compMod.then && compMod.then(mod => mod.default)\n      export default Component\n      export const getStaticProps = compMod['getStaticProp' + 's'] || compMod.then && compMod.then(mod => mod['getStaticProp' + 's'])\n      export const getStaticPaths = compMod['getStaticPath' + 's'] || compMod.then && compMod.then(mod => mod['getStaticPath' + 's'])\n      export const getServerSideProps = compMod['getServerSideProp' + 's'] || compMod.then && compMod.then(mod => mod['getServerSideProp' + 's'])\n\n      // kept for detecting legacy exports\n      export const unstable_getStaticParams = compMod['unstable_getStaticParam' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getStaticParam' + 's'])\n      export const unstable_getStaticProps = compMod['unstable_getStaticProp' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getStaticProp' + 's'])\n      export const unstable_getStaticPaths = compMod['unstable_getStaticPath' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getStaticPath' + 's'])\n      export const unstable_getServerProps = compMod['unstable_getServerProp' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getServerProp' + 's'])\n\n      export let config = compMod['confi' + 'g'] || (compMod.then && compMod.then(mod => mod['confi' + 'g'])) || {}\n      export const _app = App\n\n      const combinedRewrites = Array.isArray(routesManifest.rewrites)\n        ? routesManifest.rewrites\n        : []\n\n      if (!Array.isArray(routesManifest.rewrites)) {\n        combinedRewrites.push(...routesManifest.rewrites.beforeFiles)\n        combinedRewrites.push(...routesManifest.rewrites.afterFiles)\n        combinedRewrites.push(...routesManifest.rewrites.fallback)\n      }\n\n      const { renderReqToHTML, render } = getPageHandler({\n        pageModule: compMod,\n        pageComponent: Component,\n        pageConfig: config,\n        appModule: App,\n        documentModule: documentModule,\n        errorModule: require(\"${absoluteErrorPath}\"),\n        notFoundModule: ${\n          absolute404Path ? `require(\"${absolute404Path}\")` : undefined\n        },\n        pageGetStaticProps: getStaticProps,\n        pageGetStaticPaths: getStaticPaths,\n        pageGetServerSideProps: getServerSideProps,\n\n        assetPrefix: \"${assetPrefix}\",\n        canonicalBase: \"${canonicalBase}\",\n        generateEtags: ${generateEtags || 'false'},\n        poweredByHeader: ${poweredByHeader || 'false'},\n\n        runtimeConfig,\n        buildManifest,\n        reactLoadableManifest,\n\n        rewrites: combinedRewrites,\n        i18n: ${i18n || 'undefined'},\n        page: \"${page}\",\n        buildId: \"${buildId}\",\n        escapedBuildId: \"${escapedBuildId}\",\n        basePath: \"${basePath}\",\n        pageIsDynamic: ${pageIsDynamicRoute},\n        encodedPreviewProps: ${encodedPreviewProps}\n      })\n      export { renderReqToHTML, render }\n    `\n    }\n  })\n}\n\nexport default nextServerlessLoader\n"],"names":[],"mappings":"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"}