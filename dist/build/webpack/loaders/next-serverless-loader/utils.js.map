{"version":3,"sources":["../../../../../build/webpack/loaders/next-serverless-loader/utils.ts"],"names":["getCustomRouteMatcher","vercelHeader","getUtils","page","i18n","basePath","rewrites","pageIsDynamic","defaultRouteRegex","dynamicRouteMatcher","defaultRouteMatches","handleRewrites","parsedUrl","rewrite","matcher","source","params","pathname","parsedDestination","destination","query","Object","assign","fsPathname","replace","RegExp","destLocalePathResult","locales","nextInternalLocale","detectedLocale","dynamicParams","handleBasePath","req","url","normalizeDynamicRouteParams","hasValidParams","keys","groups","reduce","prev","key","value","isDefaultValue","Array","isArray","every","val","idx","optional","length","undefined","repeat","split","handleLocale","res","routeNoAssetPath","shouldNotRedirect","defaultLocale","acceptPreferredLocale","localeDetection","accept","language","headers","host","hostname","toLowerCase","detectedDomain","domains","localeDomainRedirect","localePathResult","__nextStrippedLocale","localeToCheck","matchedDomain","domain","http","denormalizedPagePath","detectedDefaultLocale","shouldStripDefaultLocale","shouldAddLocalePrefix","previous","getHeader","setHeader","cookie","serialize","httpOnly","path","statusCode","TEMPORARY_REDIRECT_STATUS","end"],"mappings":"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","sourcesContent":["import { IncomingMessage, ServerResponse } from 'http'\nimport { format as formatUrl, UrlWithParsedQuery } from 'url'\nimport { ParsedUrlQuery } from 'querystring'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { normalizeLocalePath } from '../../../../next-server/lib/i18n/normalize-locale-path'\nimport pathMatch from '../../../../next-server/lib/router/utils/path-match'\nimport { getRouteRegex } from '../../../../next-server/lib/router/utils/route-regex'\nimport { getRouteMatcher } from '../../../../next-server/lib/router/utils/route-matcher'\nimport prepareDestination from '../../../../next-server/lib/router/utils/prepare-destination'\nimport { __ApiPreviewProps } from '../../../../next-server/server/api-utils'\nimport { BuildManifest } from '../../../../next-server/server/get-page-files'\nimport {\n  GetServerSideProps,\n  GetStaticPaths,\n  GetStaticProps,\n} from '../../../../types'\nimport accept from '@hapi/accept'\nimport { detectLocaleCookie } from '../../../../next-server/lib/i18n/detect-locale-cookie'\nimport { detectDomainLocale } from '../../../../next-server/lib/i18n/detect-domain-locale'\nimport { denormalizePagePath } from '../../../../next-server/server/denormalize-page-path'\nimport cookie from 'next/dist/compiled/cookie'\nimport { TEMPORARY_REDIRECT_STATUS } from '../../../../next-server/lib/constants'\n\nconst getCustomRouteMatcher = pathMatch(true)\n\nexport const vercelHeader = 'x-vercel-id'\n\nexport type ServerlessHandlerCtx = {\n  page: string\n\n  pageModule: any\n  pageComponent?: any\n  pageConfig?: any\n  pageGetStaticProps?: GetStaticProps\n  pageGetStaticPaths?: GetStaticPaths\n  pageGetServerSideProps?: GetServerSideProps\n\n  appModule?: any\n  errorModule?: any\n  documentModule?: any\n  notFoundModule?: any\n\n  runtimeConfig: any\n  buildManifest?: BuildManifest\n  reactLoadableManifest?: any\n  basePath: string\n  rewrites: Rewrite[]\n  pageIsDynamic: boolean\n  generateEtags: boolean\n  distDir: string\n  buildId: string\n  escapedBuildId: string\n  assetPrefix: string\n  poweredByHeader: boolean\n  canonicalBase: string\n  encodedPreviewProps: __ApiPreviewProps\n  i18n?: {\n    localeDetection?: false\n    locales: string[]\n    defaultLocale: string\n    domains: Array<{\n      domain: string\n      locales: string[]\n      defaultLocale: string\n    }>\n  }\n  experimental: {\n    initServer: () => Promise<any>\n    onError: ({ err }: { err: Error }) => Promise<any>\n  }\n}\n\nexport function getUtils({\n  page,\n  i18n,\n  basePath,\n  rewrites,\n  pageIsDynamic,\n}: ServerlessHandlerCtx) {\n  let defaultRouteRegex: ReturnType<typeof getRouteRegex> | undefined\n  let dynamicRouteMatcher: ReturnType<typeof getRouteMatcher> | undefined\n  let defaultRouteMatches: ParsedUrlQuery | undefined\n\n  if (pageIsDynamic) {\n    defaultRouteRegex = getRouteRegex(page)\n    dynamicRouteMatcher = getRouteMatcher(defaultRouteRegex)\n    defaultRouteMatches = dynamicRouteMatcher(page) as ParsedUrlQuery\n  }\n\n  function handleRewrites(parsedUrl: UrlWithParsedQuery) {\n    for (const rewrite of rewrites) {\n      const matcher = getCustomRouteMatcher(rewrite.source)\n      const params = matcher(parsedUrl.pathname)\n\n      if (params) {\n        const { parsedDestination } = prepareDestination(\n          rewrite.destination,\n          params,\n          parsedUrl.query,\n          true,\n          ''\n        )\n\n        Object.assign(parsedUrl.query, parsedDestination.query)\n        delete (parsedDestination as any).query\n\n        Object.assign(parsedUrl, parsedDestination)\n\n        let fsPathname = parsedUrl.pathname\n\n        if (basePath) {\n          fsPathname =\n            fsPathname!.replace(new RegExp(`^${basePath}`), '') || '/'\n        }\n\n        if (i18n) {\n          const destLocalePathResult = normalizeLocalePath(\n            fsPathname!,\n            i18n.locales\n          )\n          fsPathname = destLocalePathResult.pathname\n          parsedUrl.query.nextInternalLocale =\n            destLocalePathResult.detectedLocale || params.nextInternalLocale\n        }\n\n        if (fsPathname === page) {\n          break\n        }\n\n        if (pageIsDynamic && dynamicRouteMatcher) {\n          const dynamicParams = dynamicRouteMatcher(fsPathname)\n          if (dynamicParams) {\n            parsedUrl.query = {\n              ...parsedUrl.query,\n              ...dynamicParams,\n            }\n            break\n          }\n        }\n      }\n    }\n\n    return parsedUrl\n  }\n\n  function handleBasePath(req: IncomingMessage, parsedUrl: UrlWithParsedQuery) {\n    // always strip the basePath if configured since it is required\n    req.url = req.url!.replace(new RegExp(`^${basePath}`), '') || '/'\n    parsedUrl.pathname =\n      parsedUrl.pathname!.replace(new RegExp(`^${basePath}`), '') || '/'\n  }\n\n  function normalizeDynamicRouteParams(params: ParsedUrlQuery) {\n    let hasValidParams = true\n    if (!defaultRouteRegex) return { params, hasValidParams }\n\n    params = Object.keys(defaultRouteRegex.groups).reduce((prev, key) => {\n      let value: string | string[] | undefined = params[key]\n\n      // if the value matches the default value we can't rely\n      // on the parsed params, this is used to signal if we need\n      // to parse x-now-route-matches or not\n      const isDefaultValue = Array.isArray(value)\n        ? value.every((val, idx) => val === defaultRouteMatches![key][idx])\n        : value === defaultRouteMatches![key]\n\n      if (isDefaultValue || typeof value === 'undefined') {\n        hasValidParams = false\n      }\n\n      // non-provided optional values should be undefined so normalize\n      // them to undefined\n      if (\n        defaultRouteRegex!.groups[key].optional &&\n        (!value ||\n          (Array.isArray(value) &&\n            value.length === 1 &&\n            // fallback optional catch-all SSG pages have\n            // [[...paramName]] for the root path on Vercel\n            (value[0] === 'index' || value[0] === `[[...${key}]]`)))\n      ) {\n        value = undefined\n        delete params[key]\n      }\n\n      // query values from the proxy aren't already split into arrays\n      // so make sure to normalize catch-all values\n      if (\n        value &&\n        typeof value === 'string' &&\n        defaultRouteRegex!.groups[key].repeat\n      ) {\n        value = value.split('/')\n      }\n\n      if (value) {\n        prev[key] = value\n      }\n      return prev\n    }, {} as ParsedUrlQuery)\n\n    return {\n      params,\n      hasValidParams,\n    }\n  }\n\n  function handleLocale(\n    req: IncomingMessage,\n    res: ServerResponse,\n    parsedUrl: UrlWithParsedQuery,\n    routeNoAssetPath: string,\n    shouldNotRedirect: boolean\n  ) {\n    if (!i18n) return\n\n    let defaultLocale = i18n.defaultLocale\n    let detectedLocale = detectLocaleCookie(req, i18n.locales)\n    let acceptPreferredLocale =\n      i18n.localeDetection !== false\n        ? accept.language(req.headers['accept-language'], i18n.locales)\n        : detectedLocale\n\n    const { host } = req.headers || {}\n    // remove port from host and remove port if present\n    const hostname = host && host.split(':')[0].toLowerCase()\n\n    const detectedDomain = detectDomainLocale(i18n.domains, hostname)\n    if (detectedDomain) {\n      defaultLocale = detectedDomain.defaultLocale\n      detectedLocale = defaultLocale\n    }\n\n    // if not domain specific locale use accept-language preferred\n    detectedLocale = detectedLocale || acceptPreferredLocale\n\n    let localeDomainRedirect\n    const localePathResult = normalizeLocalePath(\n      parsedUrl.pathname!,\n      i18n.locales\n    )\n\n    routeNoAssetPath = normalizeLocalePath(routeNoAssetPath, i18n.locales)\n      .pathname\n\n    if (localePathResult.detectedLocale) {\n      detectedLocale = localePathResult.detectedLocale\n      req.url = formatUrl({\n        ...parsedUrl,\n        pathname: localePathResult.pathname,\n      })\n      ;(req as any).__nextStrippedLocale = true\n      parsedUrl.pathname = localePathResult.pathname\n    }\n\n    // If a detected locale is a domain specific locale and we aren't already\n    // on that domain and path prefix redirect to it to prevent duplicate\n    // content from multiple domains\n    if (detectedDomain) {\n      const localeToCheck = localePathResult.detectedLocale\n        ? detectedLocale\n        : acceptPreferredLocale\n\n      const matchedDomain = detectDomainLocale(\n        i18n.domains,\n        undefined,\n        localeToCheck\n      )\n\n      if (matchedDomain && matchedDomain.domain !== detectedDomain.domain) {\n        localeDomainRedirect = `http${matchedDomain.http ? '' : 's'}://${\n          matchedDomain.domain\n        }/${localeToCheck === matchedDomain.defaultLocale ? '' : localeToCheck}`\n      }\n    }\n\n    const denormalizedPagePath = denormalizePagePath(parsedUrl.pathname || '/')\n    const detectedDefaultLocale =\n      !detectedLocale ||\n      detectedLocale.toLowerCase() === defaultLocale.toLowerCase()\n    const shouldStripDefaultLocale = false\n    // detectedDefaultLocale &&\n    // denormalizedPagePath.toLowerCase() === \\`/\\${i18n.defaultLocale.toLowerCase()}\\`\n\n    const shouldAddLocalePrefix =\n      !detectedDefaultLocale && denormalizedPagePath === '/'\n\n    detectedLocale = detectedLocale || i18n.defaultLocale\n\n    if (\n      !shouldNotRedirect &&\n      !req.headers[vercelHeader] &&\n      i18n.localeDetection !== false &&\n      (localeDomainRedirect ||\n        shouldAddLocalePrefix ||\n        shouldStripDefaultLocale)\n    ) {\n      // set the NEXT_LOCALE cookie when a user visits the default locale\n      // with the locale prefix so that they aren't redirected back to\n      // their accept-language preferred locale\n      if (shouldStripDefaultLocale && acceptPreferredLocale !== defaultLocale) {\n        const previous = res.getHeader('set-cookie')\n\n        res.setHeader('set-cookie', [\n          ...(typeof previous === 'string'\n            ? [previous]\n            : Array.isArray(previous)\n            ? previous\n            : []),\n          cookie.serialize('NEXT_LOCALE', defaultLocale, {\n            httpOnly: true,\n            path: '/',\n          }),\n        ])\n      }\n\n      res.setHeader(\n        'Location',\n        formatUrl({\n          // make sure to include any query values when redirecting\n          ...parsedUrl,\n          pathname: localeDomainRedirect\n            ? localeDomainRedirect\n            : shouldStripDefaultLocale\n            ? basePath || '/'\n            : `${basePath}/${detectedLocale}`,\n        })\n      )\n      res.statusCode = TEMPORARY_REDIRECT_STATUS\n      res.end()\n      return\n    }\n\n    detectedLocale =\n      localePathResult.detectedLocale ||\n      (detectedDomain && detectedDomain.defaultLocale) ||\n      defaultLocale\n\n    return {\n      defaultLocale,\n      detectedLocale,\n      routeNoAssetPath,\n    }\n  }\n\n  return {\n    handleLocale,\n    handleRewrites,\n    handleBasePath,\n    defaultRouteRegex,\n    dynamicRouteMatcher,\n    defaultRouteMatches,\n    normalizeDynamicRouteParams,\n  }\n}\n"]}