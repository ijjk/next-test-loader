"use strict";exports.__esModule=true;exports.ProfilingPlugin=exports.spans=void 0;var _tracer=require("../../tracer");var _webpack=require("next/dist/compiled/webpack/webpack");const pluginName='ProfilingPlugin';const spans=new WeakMap();exports.spans=spans;function getNormalModuleLoaderHook(compilation){if(_webpack.isWebpack5){// @ts-ignore TODO: Remove ignore when webpack 5 is stable
return _webpack.webpack.NormalModule.getCompilationHooks(compilation).loader;}return compilation.hooks.normalModuleLoader;}class ProfilingPlugin{apply(compiler){// Only enabled when instrumentation is loaded
const currentSpan=_tracer.tracer.getCurrentSpan();if(!currentSpan||!currentSpan.isRecording()){return;}compiler.hooks.compile.tap(pluginName,()=>{const span=_tracer.tracer.startSpan('webpack-compile',{attributes:{name:compiler.name}});spans.set(compiler,span);});compiler.hooks.done.tap(pluginName,()=>{spans.get(compiler).end();});compiler.hooks.compilation.tap(pluginName,compilation=>{compilation.hooks.buildModule.tap(pluginName,module=>{_tracer.tracer.withSpan(spans.get(compiler),()=>{const span=_tracer.tracer.startSpan('build-module');span.setAttribute('name',module.userRequest);spans.set(module,span);});});getNormalModuleLoaderHook(compilation).tap(pluginName,(loaderContext,module)=>{const parentSpan=spans.get(module);loaderContext.currentTraceSpan=parentSpan;});compilation.hooks.succeedModule.tap(pluginName,module=>{spans.get(module).end();});});}}exports.ProfilingPlugin=ProfilingPlugin;
//# sourceMappingURL=profiling-plugin.js.map