"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");exports.__esModule=true;exports.default=Image;var _objectWithoutPropertiesLoose2=_interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));var _react=_interopRequireDefault(require("react"));var _head=_interopRequireDefault(require("../next-server/lib/head"));const loaders={imgix:imgixLoader,cloudinary:cloudinaryLoader,default:defaultLoader};let imageData=process.env.__NEXT_IMAGE_OPTS;const breakpoints=imageData.breakpoints||[640,1024,1600];function computeSrc(src,host,unoptimized){if(unoptimized){return src;}if(!host){// No host provided, use default
return callLoader(src,'default');}else{let selectedHost=imageData.hosts[host];if(!selectedHost){if(process.env.NODE_ENV!=='production'){console.error(`Image tag is used specifying host ${host}, but that host is not defined in next.config`);}return src;}return callLoader(src,host);}}function callLoader(src,host,width){let loader=loaders[imageData.hosts[host].loader||'default'];return loader({root:imageData.hosts[host].path,filename:src,width});}function generateSrcSet({src,host,widths}){// At each breakpoint, generate an image url using the loader, such as:
// ' www.example.com/foo.jpg?w=480 480w, '
return widths.map(width=>`${callLoader(src,host,width)} ${width}w`).join(', ');}function generatePreload({src,host,widths,unoptimized,sizes}){// This function generates an image preload that makes use of the "imagesrcset" and "imagesizes"
// attributes for preloading responsive images. They're still experimental, but fully backward
// compatible, as the link tag includes all necessary attributes, even if the final two are ignored.
// See: https://web.dev/preload-responsive-images/
return/*#__PURE__*/_react.default.createElement(_head.default,null,/*#__PURE__*/_react.default.createElement("link",{rel:"preload",as:"image",href:computeSrc(src,host,unoptimized)// @ts-ignore: imagesrcset and imagesizes not yet in the link element type
,imagesrcset:generateSrcSet({src,host,widths}),imagesizes:sizes}));}function Image(_ref){let{src,host,sizes,unoptimized,priority}=_ref,rest=(0,_objectWithoutPropertiesLoose2.default)(_ref,["src","host","sizes","unoptimized","priority"]);// Sanity Checks:
if(process.env.NODE_ENV!=='production'){if(unoptimized&&host){console.error(`Image tag used specifying both a host and the unoptimized attribute--these are mutually exclusive. 
          With the unoptimized attribute, no host will be used, so specify an absolute URL.`);}}if(host&&!imageData.hosts[host]){// If unregistered host is selected, log an error and use the default instead
if(process.env.NODE_ENV!=='production'){console.error(`Image host identifier ${host} could not be resolved.`);}host='default';}host=host||'default';// Normalize provided src
if(src[0]==='/'){src=src.slice(1);}// Generate attribute values
const imgSrc=computeSrc(src,host,unoptimized);const imgAttributes={src:imgSrc};if(!unoptimized){imgAttributes.srcSet=generateSrcSet({src,host:host,widths:breakpoints});}// No need to add preloads on the client side--by the time the application is hydrated,
// it's too late for preloads
const shouldPreload=priority&&typeof window==='undefined';return/*#__PURE__*/_react.default.createElement("div",null,shouldPreload?generatePreload({src,host,widths:breakpoints,unoptimized,sizes}):'',/*#__PURE__*/_react.default.createElement("img",Object.assign({},rest,imgAttributes,{sizes:sizes})));}//BUILT IN LOADERS
function imgixLoader({root,filename,width}){return`${root}${filename}${width?'?w='+width:''}`;}function cloudinaryLoader({root,filename,width}){return`${root}${width?'w_'+width+'/':''}${filename}`;}function defaultLoader({root,filename}){return`${root}${filename}`;}
//# sourceMappingURL=image.js.map