{"version":3,"sources":["../../client/image.tsx"],"names":["loaders","imgix","imgixLoader","cloudinary","cloudinaryLoader","default","defaultLoader","imageData","process","env","__NEXT_IMAGE_OPTS","breakpoints","computeSrc","src","host","unoptimized","callLoader","selectedHost","hosts","NODE_ENV","console","error","width","loader","root","path","filename","generateSrcSet","widths","map","join","generatePreload","sizes","Image","priority","rest","slice","imgSrc","imgAttributes","srcSet","shouldPreload","window"],"mappings":"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","sourcesContent":["import React, { ReactElement } from 'react'\nimport Head from '../next-server/lib/head'\n\nconst loaders: { [key: string]: (props: LoaderProps) => string } = {\n  imgix: imgixLoader,\n  cloudinary: cloudinaryLoader,\n  default: defaultLoader,\n}\ntype ImageData = {\n  hosts: {\n    [key: string]: {\n      path: string\n      loader: string\n    }\n  }\n  breakpoints?: number[]\n}\n\ntype ImageProps = {\n  src: string\n  host: string\n  sizes: string\n  breakpoints: number[]\n  priority: boolean\n  unoptimized: boolean\n  rest: any[]\n}\n\nlet imageData: any = process.env.__NEXT_IMAGE_OPTS\nconst breakpoints = imageData.breakpoints || [640, 1024, 1600]\n\nfunction computeSrc(src: string, host: string, unoptimized: boolean): string {\n  if (unoptimized) {\n    return src\n  }\n  if (!host) {\n    // No host provided, use default\n    return callLoader(src, 'default')\n  } else {\n    let selectedHost = imageData.hosts[host]\n    if (!selectedHost) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.error(\n          `Image tag is used specifying host ${host}, but that host is not defined in next.config`\n        )\n      }\n      return src\n    }\n    return callLoader(src, host)\n  }\n}\n\nfunction callLoader(src: string, host: string, width?: number): string {\n  let loader = loaders[imageData.hosts[host].loader || 'default']\n  return loader({ root: imageData.hosts[host].path, filename: src, width })\n}\n\ntype SrcSetData = {\n  src: string\n  host: string\n  widths: number[]\n}\n\nfunction generateSrcSet({ src, host, widths }: SrcSetData): string {\n  // At each breakpoint, generate an image url using the loader, such as:\n  // ' www.example.com/foo.jpg?w=480 480w, '\n  return widths\n    .map((width: number) => `${callLoader(src, host, width)} ${width}w`)\n    .join(', ')\n}\n\ntype PreloadData = {\n  src: string\n  host: string\n  widths: number[]\n  sizes: string\n  unoptimized: boolean\n}\n\nfunction generatePreload({\n  src,\n  host,\n  widths,\n  unoptimized,\n  sizes,\n}: PreloadData): ReactElement {\n  // This function generates an image preload that makes use of the \"imagesrcset\" and \"imagesizes\"\n  // attributes for preloading responsive images. They're still experimental, but fully backward\n  // compatible, as the link tag includes all necessary attributes, even if the final two are ignored.\n  // See: https://web.dev/preload-responsive-images/\n  return (\n    <Head>\n      <link\n        rel=\"preload\"\n        as=\"image\"\n        href={computeSrc(src, host, unoptimized)}\n        // @ts-ignore: imagesrcset and imagesizes not yet in the link element type\n        imagesrcset={generateSrcSet({ src, host, widths })}\n        imagesizes={sizes}\n      />\n    </Head>\n  )\n}\n\nexport default function Image({\n  src,\n  host,\n  sizes,\n  unoptimized,\n  priority,\n  ...rest\n}: ImageProps) {\n  // Sanity Checks:\n  if (process.env.NODE_ENV !== 'production') {\n    if (unoptimized && host) {\n      console.error(`Image tag used specifying both a host and the unoptimized attribute--these are mutually exclusive. \n          With the unoptimized attribute, no host will be used, so specify an absolute URL.`)\n    }\n  }\n  if (host && !imageData.hosts[host]) {\n    // If unregistered host is selected, log an error and use the default instead\n    if (process.env.NODE_ENV !== 'production') {\n      console.error(`Image host identifier ${host} could not be resolved.`)\n    }\n    host = 'default'\n  }\n\n  host = host || 'default'\n\n  // Normalize provided src\n  if (src[0] === '/') {\n    src = src.slice(1)\n  }\n\n  // Generate attribute values\n  const imgSrc = computeSrc(src, host, unoptimized)\n  const imgAttributes: { src: string; srcSet?: string } = { src: imgSrc }\n  if (!unoptimized) {\n    imgAttributes.srcSet = generateSrcSet({\n      src,\n      host: host,\n      widths: breakpoints,\n    })\n  }\n  // No need to add preloads on the client side--by the time the application is hydrated,\n  // it's too late for preloads\n  const shouldPreload = priority && typeof window === 'undefined'\n\n  return (\n    <div>\n      {shouldPreload\n        ? generatePreload({\n            src,\n            host,\n            widths: breakpoints,\n            unoptimized,\n            sizes,\n          })\n        : ''}\n      <img {...rest} {...imgAttributes} sizes={sizes} />\n    </div>\n  )\n}\n\n//BUILT IN LOADERS\n\ntype LoaderProps = {\n  root: string\n  filename: string\n  width?: number\n}\n\nfunction imgixLoader({ root, filename, width }: LoaderProps): string {\n  return `${root}${filename}${width ? '?w=' + width : ''}`\n}\n\nfunction cloudinaryLoader({ root, filename, width }: LoaderProps): string {\n  return `${root}${width ? 'w_' + width + '/' : ''}${filename}`\n}\n\nfunction defaultLoader({ root, filename }: LoaderProps): string {\n  return `${root}${filename}`\n}\n"]}