{"version":3,"sources":["../../../lib/eslint/runLintCheck.ts"],"names":["lint","deps","baseDir","lintDirs","eslintrcFile","pkgJsonPath","eslintOptions","reportErrorsOnly","maxWarnings","mod","resolved","get","ESLint","eslintVersion","version","CLIEngine","semver","lt","chalk","red","options","useEslintrc","baseConfig","extensions","eslint","nextEslintPluginIsEnabled","pagesDirRules","configFile","completeConfig","calculateConfigForFile","plugins","includes","pagesDir","updatedPagesDir","rule","rules","replace","lintStart","process","hrtime","results","lintFiles","fix","outputFixes","getErrorResults","formattedResult","lintEnd","totalWarnings","reduce","sum","file","warningCount","output","isError","length","eventInfo","durationInSeconds","lintedFilesCount","lintFix","nextEslintPluginVersion","require","path","join","dirname","nextEslintPluginErrorsCount","totalNextPluginErrorCount","nextEslintPluginWarningsCount","totalNextPluginWarningCount","runLintCheck","lintDuringBuild","cwd","packageJsonConfig","pkgJsonContent","fs","readFile","encoding","CommentJson","parse","eslintConfig","Log","warn","bold","cyan","err"],"mappings":"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","sourcesContent":["import { promises as fs } from 'fs'\nimport chalk from 'chalk'\nimport path from 'path'\n\nimport findUp from 'next/dist/compiled/find-up'\nimport semver from 'next/dist/compiled/semver'\nimport * as CommentJson from 'next/dist/compiled/comment-json'\n\nimport { LintResult, formatResults } from './customFormatter'\nimport { writeDefaultConfig } from './writeDefaultConfig'\nimport { existsSync, findPagesDir } from '../find-pages-dir'\nimport {\n  hasNecessaryDependencies,\n  NecessaryDependencies,\n} from '../has-necessary-dependencies'\n\nimport * as Log from '../../build/output/log'\nimport { EventLintCheckCompleted } from '../../telemetry/events/build'\n\ntype Config = {\n  plugins: string[]\n  rules: { [key: string]: Array<number | string> }\n}\n\nasync function lint(\n  deps: NecessaryDependencies,\n  baseDir: string,\n  lintDirs: string[],\n  eslintrcFile: string | null,\n  pkgJsonPath: string | null,\n  eslintOptions: any = null,\n  reportErrorsOnly: boolean = false,\n  maxWarnings: number = -1\n): Promise<\n  | string\n  | null\n  | {\n      output: string | null\n      isError: boolean\n      eventInfo: EventLintCheckCompleted\n    }\n> {\n  // Load ESLint after we're sure it exists:\n  const mod = await import(deps.resolved.get('eslint')!)\n\n  const { ESLint } = mod\n  let eslintVersion = ESLint?.version\n\n  if (!ESLint) {\n    eslintVersion = mod?.CLIEngine?.version\n\n    if (!eslintVersion || semver.lt(eslintVersion, '7.0.0')) {\n      return `${chalk.red(\n        'error'\n      )} - Your project has an older version of ESLint installed${\n        eslintVersion ? ' (' + eslintVersion + ')' : ''\n      }. Please upgrade to ESLint version 7 or later`\n    }\n\n    return `${chalk.red(\n      'error'\n    )} - ESLint class not found. Please upgrade to ESLint version 7 or later`\n  }\n  let options: any = {\n    useEslintrc: true,\n    baseConfig: {},\n    extensions: ['.js', '.jsx', '.ts', '.tsx'],\n    ...eslintOptions,\n  }\n  let eslint = new ESLint(options)\n\n  let nextEslintPluginIsEnabled = false\n  const pagesDirRules = ['@next/next/no-html-link-for-pages']\n\n  for (const configFile of [eslintrcFile, pkgJsonPath]) {\n    if (!configFile) continue\n\n    const completeConfig: Config = await eslint.calculateConfigForFile(\n      configFile\n    )\n\n    if (completeConfig.plugins?.includes('@next/next')) {\n      nextEslintPluginIsEnabled = true\n      break\n    }\n  }\n\n  const pagesDir = findPagesDir(baseDir)\n\n  if (nextEslintPluginIsEnabled) {\n    let updatedPagesDir = false\n\n    for (const rule of pagesDirRules) {\n      if (\n        !options.baseConfig!.rules?.[rule] &&\n        !options.baseConfig!.rules?.[\n          rule.replace('@next/next', '@next/babel-plugin-next')\n        ]\n      ) {\n        if (!options.baseConfig!.rules) {\n          options.baseConfig!.rules = {}\n        }\n        options.baseConfig!.rules[rule] = [1, pagesDir]\n        updatedPagesDir = true\n      }\n    }\n\n    if (updatedPagesDir) {\n      eslint = new ESLint(options)\n    }\n  }\n  const lintStart = process.hrtime()\n\n  let results = await eslint.lintFiles(lintDirs)\n  if (options.fix) await ESLint.outputFixes(results)\n  if (reportErrorsOnly) results = await ESLint.getErrorResults(results) // Only return errors if --quiet flag is used\n\n  const formattedResult = formatResults(baseDir, results)\n  const lintEnd = process.hrtime(lintStart)\n  const totalWarnings = results.reduce(\n    (sum: number, file: LintResult) => sum + file.warningCount,\n    0\n  )\n\n  return {\n    output: formattedResult.output,\n    isError:\n      ESLint.getErrorResults(results)?.length > 0 ||\n      (maxWarnings >= 0 && totalWarnings > maxWarnings),\n    eventInfo: {\n      durationInSeconds: lintEnd[0],\n      eslintVersion: eslintVersion,\n      lintedFilesCount: results.length,\n      lintFix: !!options.fix,\n      nextEslintPluginVersion: nextEslintPluginIsEnabled\n        ? require(path.join(\n            path.dirname(deps.resolved.get('eslint-config-next')!),\n            'package.json'\n          )).version\n        : null,\n      nextEslintPluginErrorsCount: formattedResult.totalNextPluginErrorCount,\n      nextEslintPluginWarningsCount:\n        formattedResult.totalNextPluginWarningCount,\n    },\n  }\n}\n\nexport async function runLintCheck(\n  baseDir: string,\n  lintDirs: string[],\n  lintDuringBuild: boolean = false,\n  eslintOptions: any = null,\n  reportErrorsOnly: boolean = false,\n  maxWarnings: number = -1\n): ReturnType<typeof lint> {\n  try {\n    // Find user's .eslintrc file\n    const eslintrcFile =\n      (await findUp(\n        [\n          '.eslintrc.js',\n          '.eslintrc.yaml',\n          '.eslintrc.yml',\n          '.eslintrc.json',\n          '.eslintrc',\n        ],\n        {\n          cwd: baseDir,\n        }\n      )) ?? null\n\n    const pkgJsonPath = (await findUp('package.json', { cwd: baseDir })) ?? null\n    let packageJsonConfig = null\n    if (pkgJsonPath) {\n      const pkgJsonContent = await fs.readFile(pkgJsonPath, {\n        encoding: 'utf8',\n      })\n      packageJsonConfig = CommentJson.parse(pkgJsonContent)\n    }\n\n    // Warning displayed if no ESLint configuration is present during build\n    if (lintDuringBuild && !eslintrcFile && !packageJsonConfig.eslintConfig) {\n      Log.warn(\n        `No ESLint configuration detected. Run ${chalk.bold.cyan(\n          'next lint'\n        )} to begin setup`\n      )\n      return null\n    }\n\n    // Ensure ESLint and necessary plugins and configs are installed:\n    const deps: NecessaryDependencies = await hasNecessaryDependencies(\n      baseDir,\n      false,\n      true,\n      lintDuringBuild\n    )\n\n    // Write default ESLint config if none is present\n    // Check for /pages and src/pages is to make sure this happens in Next.js folder\n    if (\n      existsSync(path.join(baseDir, 'pages')) ||\n      existsSync(path.join(baseDir, 'src/pages'))\n    ) {\n      await writeDefaultConfig(eslintrcFile, pkgJsonPath, packageJsonConfig)\n    }\n\n    // Run ESLint\n    return await lint(\n      deps,\n      baseDir,\n      lintDirs,\n      eslintrcFile,\n      pkgJsonPath,\n      eslintOptions,\n      reportErrorsOnly,\n      maxWarnings\n    )\n  } catch (err) {\n    throw err\n  }\n}\n"]}