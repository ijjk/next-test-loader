{"version":3,"sources":["../../lib/load-custom-routes.ts"],"names":["allowedStatusCodes","Set","allowedHasTypes","getRedirectStatus","route","statusCode","permanent","PERMANENT_REDIRECT_STATUS","TEMPORARY_REDIRECT_STATUS","normalizeRouteRegex","regex","replace","checkRedirect","invalidParts","hadInvalidStatus","has","push","checkHeader","Array","isArray","headers","header","key","value","tryParsePath","handleUrl","result","routePath","parsedDestination","pathname","hash","tokens","pathToRegexp","parse","tokensToRegexp","err","errMatches","message","match","position","parseInt","console","error","fill","join","experimentalHasWarn","Log","warn","checkCustomRoutes","routes","type","Error","numInvalidRoutes","hadInvalidHas","isRedirect","allowedKeys","JSON","stringify","basePath","destination","startsWith","source","keys","Object","invalidKeys","filter","locale","invalidHasItems","hasItem","invalidHasParts","length","itemStr","_route","sourceTokens","unnamedInDest","token","name","unnamedIndex","RegExp","add","size","destTokens","destinationParseFailed","sourceSegments","map","item","Boolean","invalidDestSegments","hasInvalidKeys","hasInvalidParts","processRoutes","config","_routes","newRoutes","defaultLocales","i18n","domains","defaultLocale","base","http","domain","r","srcBasePath","isExternal","destBasePath","forEach","locales","trailingSlash","loadRedirects","redirects","loadRewrites","rewrites","loadHeaders","loadCustomRoutes","Promise","all","unshift","undefined","internal"],"mappings":"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","sourcesContent":["import { parse as parseUrl } from 'url'\nimport { NextConfig } from '../next-server/server/config'\nimport * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\nimport escapeStringRegexp from 'next/dist/compiled/escape-string-regexp'\nimport {\n  PERMANENT_REDIRECT_STATUS,\n  TEMPORARY_REDIRECT_STATUS,\n} from '../next-server/lib/constants'\nimport { execOnce } from '../next-server/lib/utils'\nimport * as Log from '../build/output/log'\n\nexport type RouteHas = {\n  type: 'header' | 'query' | 'cookie'\n  key: string\n  value?: string\n}\n\nexport type Rewrite = {\n  source: string\n  destination: string\n  basePath?: false\n  locale?: false\n  has?: RouteHas[]\n}\n\nexport type Header = {\n  source: string\n  basePath?: false\n  locale?: false\n  headers: Array<{ key: string; value: string }>\n  has?: RouteHas[]\n}\n\n// internal type used for validation (not user facing)\nexport type Redirect = Rewrite & {\n  statusCode?: number\n  permanent?: boolean\n}\n\nexport const allowedStatusCodes = new Set([301, 302, 303, 307, 308])\nconst allowedHasTypes = new Set(['header', 'cookie', 'query'])\n\nexport function getRedirectStatus(route: {\n  statusCode?: number\n  permanent?: boolean\n}): number {\n  return (\n    route.statusCode ||\n    (route.permanent ? PERMANENT_REDIRECT_STATUS : TEMPORARY_REDIRECT_STATUS)\n  )\n}\n\nexport function normalizeRouteRegex(regex: string) {\n  // clean up un-necessary escaping from regex.source which turns / into \\\\/\n  return regex.replace(/\\\\\\//g, '/')\n}\n\nfunction checkRedirect(\n  route: Redirect\n): { invalidParts: string[]; hadInvalidStatus: boolean } {\n  const invalidParts: string[] = []\n  let hadInvalidStatus: boolean = false\n\n  if (route.statusCode && !allowedStatusCodes.has(route.statusCode)) {\n    hadInvalidStatus = true\n    invalidParts.push(`\\`statusCode\\` is not undefined or valid statusCode`)\n  }\n  if (typeof route.permanent !== 'boolean' && !route.statusCode) {\n    invalidParts.push(`\\`permanent\\` is not set to \\`true\\` or \\`false\\``)\n  }\n\n  return {\n    invalidParts,\n    hadInvalidStatus,\n  }\n}\n\nfunction checkHeader(route: Header): string[] {\n  const invalidParts: string[] = []\n\n  if (!Array.isArray(route.headers)) {\n    invalidParts.push('`headers` field must be an array')\n  } else {\n    for (const header of route.headers) {\n      if (!header || typeof header !== 'object') {\n        invalidParts.push(\n          \"`headers` items must be object with { key: '', value: '' }\"\n        )\n        break\n      }\n      if (typeof header.key !== 'string') {\n        invalidParts.push('`key` in header item must be string')\n        break\n      }\n      if (typeof header.value !== 'string') {\n        invalidParts.push('`value` in header item must be string')\n        break\n      }\n    }\n  }\n  return invalidParts\n}\n\ntype ParseAttemptResult = {\n  error?: boolean\n  tokens?: pathToRegexp.Token[]\n}\n\nfunction tryParsePath(route: string, handleUrl?: boolean): ParseAttemptResult {\n  const result: ParseAttemptResult = {}\n  let routePath = route\n\n  try {\n    if (handleUrl) {\n      const parsedDestination = parseUrl(route, true)\n      routePath = `${parsedDestination.pathname!}${\n        parsedDestination.hash || ''\n      }`\n    }\n\n    // Make sure we can parse the source properly\n    result.tokens = pathToRegexp.parse(routePath)\n    pathToRegexp.tokensToRegexp(result.tokens)\n  } catch (err) {\n    // If there is an error show our err.sh but still show original error or a formatted one if we can\n    const errMatches = err.message.match(/at (\\d{0,})/)\n\n    if (errMatches) {\n      const position = parseInt(errMatches[1], 10)\n      console.error(\n        `\\nError parsing \\`${route}\\` ` +\n          `https://err.sh/vercel/next.js/invalid-route-source\\n` +\n          `Reason: ${err.message}\\n\\n` +\n          `  ${routePath}\\n` +\n          `  ${new Array(position).fill(' ').join('')}^\\n`\n      )\n    } else {\n      console.error(\n        `\\nError parsing ${route} https://err.sh/vercel/next.js/invalid-route-source`,\n        err\n      )\n    }\n    result.error = true\n  }\n\n  return result\n}\n\nexport type RouteType = 'rewrite' | 'redirect' | 'header'\n\nconst experimentalHasWarn = execOnce(() => {\n  Log.warn(\n    `'has' route field support is still experimental and not covered by semver, use at your own risk.`\n  )\n})\n\nfunction checkCustomRoutes(\n  routes: Redirect[] | Header[] | Rewrite[],\n  type: RouteType\n): void {\n  if (!Array.isArray(routes)) {\n    throw new Error(\n      `${type}s must return an array, received ${typeof routes}.\\n` +\n        `See here for more info: https://err.sh/next.js/routes-must-be-array`\n    )\n  }\n\n  let numInvalidRoutes = 0\n  let hadInvalidStatus = false\n  let hadInvalidHas = false\n\n  const isRedirect = type === 'redirect'\n  let allowedKeys: Set<string>\n\n  if (type === 'rewrite' || isRedirect) {\n    allowedKeys = new Set([\n      'source',\n      'destination',\n      'basePath',\n      'locale',\n      ...(isRedirect ? ['statusCode', 'permanent'] : []),\n      'has',\n    ])\n  } else {\n    allowedKeys = new Set(['source', 'headers', 'basePath', 'locale', 'has'])\n  }\n\n  for (const route of routes) {\n    if (!route || typeof route !== 'object') {\n      console.error(\n        `The route ${JSON.stringify(\n          route\n        )} is not a valid object with \\`source\\` and \\`${\n          type === 'header' ? 'headers' : 'destination'\n        }\\``\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    if (\n      type === 'rewrite' &&\n      (route as Rewrite).basePath === false &&\n      !(\n        (route as Rewrite).destination.startsWith('http://') ||\n        (route as Rewrite).destination.startsWith('https://')\n      )\n    ) {\n      console.error(\n        `The route ${\n          (route as Rewrite).source\n        } rewrites urls outside of the basePath. Please use a destination that starts with \\`http://\\` or \\`https://\\` https://err.sh/vercel/next.js/invalid-external-rewrite.md`\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    const keys = Object.keys(route)\n    const invalidKeys = keys.filter((key) => !allowedKeys.has(key))\n    const invalidParts: string[] = []\n\n    if (typeof route.basePath !== 'undefined' && route.basePath !== false) {\n      invalidParts.push('`basePath` must be undefined or false')\n    }\n\n    if (typeof route.locale !== 'undefined' && route.locale !== false) {\n      invalidParts.push('`locale` must be undefined or false')\n    }\n\n    if (typeof route.has !== 'undefined' && !Array.isArray(route.has)) {\n      invalidParts.push('`has` must be undefined or valid has object')\n      hadInvalidHas = true\n    } else if (route.has) {\n      experimentalHasWarn()\n      const invalidHasItems = []\n\n      for (const hasItem of route.has) {\n        let invalidHasParts = []\n\n        if (!allowedHasTypes.has(hasItem.type)) {\n          invalidHasParts.push(`invalid type \"${hasItem.type}\"`)\n        }\n        if (typeof hasItem.key !== 'string') {\n          invalidHasParts.push(`invalid key \"${hasItem.key}\"`)\n        }\n        if (\n          typeof hasItem.value !== 'undefined' &&\n          typeof hasItem.value !== 'string'\n        ) {\n          invalidHasParts.push(`invalid value \"${hasItem.value}\"`)\n        }\n\n        if (invalidHasParts.length > 0) {\n          invalidHasItems.push(\n            `${invalidHasParts.join(', ')} for ${JSON.stringify(hasItem)}`\n          )\n        }\n      }\n\n      if (invalidHasItems.length > 0) {\n        hadInvalidHas = true\n        const itemStr = `item${invalidHasItems.length === 1 ? '' : 's'}`\n\n        console.error(\n          `Invalid \\`has\\` ${itemStr}:\\n` + invalidHasItems.join('\\n')\n        )\n        console.error()\n        invalidParts.push(`invalid \\`has\\` ${itemStr} found`)\n      }\n    }\n\n    if (!route.source) {\n      invalidParts.push('`source` is missing')\n    } else if (typeof route.source !== 'string') {\n      invalidParts.push('`source` is not a string')\n    } else if (!route.source.startsWith('/')) {\n      invalidParts.push('`source` does not start with /')\n    }\n\n    if (type === 'header') {\n      invalidParts.push(...checkHeader(route as Header))\n    } else {\n      let _route = route as Rewrite | Redirect\n      if (!_route.destination) {\n        invalidParts.push('`destination` is missing')\n      } else if (typeof _route.destination !== 'string') {\n        invalidParts.push('`destination` is not a string')\n      } else if (\n        type === 'rewrite' &&\n        !_route.destination.match(/^(\\/|https:\\/\\/|http:\\/\\/)/)\n      ) {\n        invalidParts.push(\n          '`destination` does not start with `/`, `http://`, or `https://`'\n        )\n      }\n    }\n\n    if (type === 'redirect') {\n      const result = checkRedirect(route as Redirect)\n      hadInvalidStatus = hadInvalidStatus || result.hadInvalidStatus\n      invalidParts.push(...result.invalidParts)\n    }\n\n    let sourceTokens: pathToRegexp.Token[] | undefined\n\n    if (typeof route.source === 'string' && route.source.startsWith('/')) {\n      // only show parse error if we didn't already show error\n      // for not being a string\n      const { tokens, error } = tryParsePath(route.source)\n\n      if (error) {\n        invalidParts.push('`source` parse failed')\n      }\n      sourceTokens = tokens\n    }\n\n    // make sure no unnamed patterns are attempted to be used in the\n    // destination as this can cause confusion and is not allowed\n    if (typeof (route as Rewrite).destination === 'string') {\n      if (\n        (route as Rewrite).destination.startsWith('/') &&\n        Array.isArray(sourceTokens)\n      ) {\n        const unnamedInDest = new Set()\n\n        for (const token of sourceTokens) {\n          if (typeof token === 'object' && typeof token.name === 'number') {\n            const unnamedIndex = new RegExp(`:${token.name}(?!\\\\d)`)\n            if ((route as Rewrite).destination.match(unnamedIndex)) {\n              unnamedInDest.add(`:${token.name}`)\n            }\n          }\n        }\n\n        if (unnamedInDest.size > 0) {\n          invalidParts.push(\n            `\\`destination\\` has unnamed params ${[...unnamedInDest].join(\n              ', '\n            )}`\n          )\n        } else {\n          const {\n            tokens: destTokens,\n            error: destinationParseFailed,\n          } = tryParsePath((route as Rewrite).destination, true)\n\n          if (destinationParseFailed) {\n            invalidParts.push('`destination` parse failed')\n          } else {\n            const sourceSegments = new Set(\n              sourceTokens\n                .map((item) => typeof item === 'object' && item.name)\n                .filter(Boolean)\n            )\n            const invalidDestSegments = new Set()\n\n            for (const token of destTokens!) {\n              if (\n                typeof token === 'object' &&\n                !sourceSegments.has(token.name)\n              ) {\n                invalidDestSegments.add(token.name)\n              }\n            }\n\n            if (invalidDestSegments.size) {\n              invalidParts.push(\n                `\\`destination\\` has segments not in \\`source\\` (${[\n                  ...invalidDestSegments,\n                ].join(', ')})`\n              )\n            }\n          }\n        }\n      }\n    }\n\n    const hasInvalidKeys = invalidKeys.length > 0\n    const hasInvalidParts = invalidParts.length > 0\n\n    if (hasInvalidKeys || hasInvalidParts) {\n      console.error(\n        `${invalidParts.join(', ')}${\n          invalidKeys.length\n            ? (hasInvalidParts ? ',' : '') +\n              ` invalid field${invalidKeys.length === 1 ? '' : 's'}: ` +\n              invalidKeys.join(',')\n            : ''\n        } for route ${JSON.stringify(route)}`\n      )\n      console.error()\n      numInvalidRoutes++\n    }\n  }\n\n  if (numInvalidRoutes > 0) {\n    if (hadInvalidStatus) {\n      console.error(\n        `\\nValid redirect statusCode values are ${[...allowedStatusCodes].join(\n          ', '\n        )}`\n      )\n    }\n    if (hadInvalidHas) {\n      console.error(\n        `\\nValid \\`has\\` object shape is ${JSON.stringify(\n          {\n            type: [...allowedHasTypes].join(', '),\n            key: 'the key to check for',\n            value: 'undefined or a value string to match against',\n          },\n          null,\n          2\n        )}`\n      )\n    }\n    console.error()\n\n    throw new Error(`Invalid ${type}${numInvalidRoutes === 1 ? '' : 's'} found`)\n  }\n}\n\nexport interface CustomRoutes {\n  headers: Header[]\n  rewrites: Rewrite[]\n  redirects: Redirect[]\n}\n\nfunction processRoutes<T>(\n  routes: T,\n  config: NextConfig,\n  type: 'redirect' | 'rewrite' | 'header'\n): T {\n  const _routes = (routes as any) as Array<{\n    source: string\n    locale?: false\n    basePath?: false\n    destination?: string\n  }>\n  const newRoutes: typeof _routes = []\n  const defaultLocales: Array<{\n    locale: string\n    base: string\n  }> = []\n\n  if (config.i18n && type === 'redirect') {\n    for (const item of config.i18n?.domains || []) {\n      defaultLocales.push({\n        locale: item.defaultLocale,\n        base: `http${item.http ? '' : 's'}://${item.domain}`,\n      })\n    }\n\n    defaultLocales.push({\n      locale: config.i18n.defaultLocale,\n      base: '',\n    })\n  }\n\n  for (const r of _routes) {\n    const srcBasePath =\n      config.basePath && r.basePath !== false ? config.basePath : ''\n    const isExternal = !r.destination?.startsWith('/')\n    const destBasePath = srcBasePath && !isExternal ? srcBasePath : ''\n\n    if (config.i18n && r.locale !== false) {\n      defaultLocales.forEach((item) => {\n        let destination\n\n        if (r.destination) {\n          destination = item.base\n            ? `${item.base}${destBasePath}${r.destination}`\n            : `${destBasePath}${r.destination}`\n        }\n\n        newRoutes.push({\n          ...r,\n          destination,\n          source: `${srcBasePath}/${item.locale}${r.source}`,\n        })\n      })\n\n      r.source = `/:nextInternalLocale(${config.i18n.locales\n        .map((locale: string) => escapeStringRegexp(locale))\n        .join('|')})${\n        r.source === '/' && !config.trailingSlash ? '' : r.source\n      }`\n\n      if (r.destination && r.destination?.startsWith('/')) {\n        r.destination = `/:nextInternalLocale${\n          r.destination === '/' && !config.trailingSlash ? '' : r.destination\n        }`\n      }\n    }\n    r.source = `${srcBasePath}${r.source}`\n\n    if (r.destination) {\n      r.destination = `${destBasePath}${r.destination}`\n    }\n    newRoutes.push(r)\n  }\n  return (newRoutes as any) as T\n}\n\nasync function loadRedirects(config: NextConfig) {\n  if (typeof config.redirects !== 'function') {\n    return []\n  }\n  let redirects = await config.redirects()\n  checkCustomRoutes(redirects, 'redirect')\n  return processRoutes(redirects, config, 'redirect')\n}\n\nasync function loadRewrites(config: NextConfig) {\n  if (typeof config.rewrites !== 'function') {\n    return []\n  }\n  let rewrites = await config.rewrites()\n  checkCustomRoutes(rewrites, 'rewrite')\n  return processRoutes(rewrites, config, 'rewrite')\n}\n\nasync function loadHeaders(config: NextConfig) {\n  if (typeof config.headers !== 'function') {\n    return []\n  }\n  let headers = await config.headers()\n  checkCustomRoutes(headers, 'header')\n  return processRoutes(headers, config, 'header')\n}\n\nexport default async function loadCustomRoutes(\n  config: NextConfig\n): Promise<CustomRoutes> {\n  const [headers, rewrites, redirects] = await Promise.all([\n    loadHeaders(config),\n    loadRewrites(config),\n    loadRedirects(config),\n  ])\n\n  if (config.trailingSlash) {\n    redirects.unshift(\n      {\n        source: '/:file((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\\\.\\\\w+)/',\n        destination: '/:file',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect,\n      {\n        source: '/:notfile((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\\\.]+)',\n        destination: '/:notfile/',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect\n    )\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath,\n        destination: config.basePath + '/',\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  } else {\n    redirects.unshift({\n      source: '/:path+/',\n      destination: '/:path+',\n      permanent: true,\n      locale: config.i18n ? false : undefined,\n      internal: true,\n    } as Redirect)\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath + '/',\n        destination: config.basePath,\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  }\n\n  return {\n    headers,\n    rewrites,\n    redirects,\n  }\n}\n"]}