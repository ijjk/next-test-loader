{"version":3,"sources":["lib/recursive-copy.ts"],"sourcesContent":["import path from 'path'\nimport { promises, constants } from 'fs'\nimport { Sema } from 'next/dist/compiled/async-sema'\n\nconst COPYFILE_EXCL = constants.COPYFILE_EXCL\n\nexport async function recursiveCopy(\n  source: string,\n  dest: string,\n  {\n    concurrency = 32,\n    overwrite = false,\n    filter = () => true,\n  }: {\n    concurrency?: number\n    overwrite?: boolean\n    filter?(filePath: string): boolean\n  } = {}\n): Promise<void> {\n  const cwdPath = process.cwd()\n  const from = path.resolve(cwdPath, source)\n  const to = path.resolve(cwdPath, dest)\n\n  const sema = new Sema(concurrency)\n\n  async function _copy(item: string): Promise<void> {\n    const target = item.replace(from, to)\n    const stats = await promises.stat(item)\n\n    await sema.acquire()\n\n    if (stats.isDirectory()) {\n      try {\n        await promises.mkdir(target)\n      } catch (err) {\n        // do not throw `folder already exists` errors\n        if (err.code !== 'EEXIST') {\n          throw err\n        }\n      }\n      sema.release()\n      const files = await promises.readdir(item)\n      await Promise.all(files.map((file) => _copy(path.join(item, file))))\n    } else if (\n      stats.isFile() &&\n      // before we send the path to filter\n      // we remove the base path (from) and replace \\ by / (windows)\n      filter(item.replace(from, '').replace(/\\\\/g, '/'))\n    ) {\n      await promises.copyFile(\n        item,\n        target,\n        overwrite ? undefined : COPYFILE_EXCL\n      )\n      sema.release()\n    }\n  }\n\n  await _copy(from)\n}\n"],"names":[],"mappings":";;;;QAMsB,aAAa,GAAb,aAAa;AANlB,GAAM,CAAN,KAAM;AACa,GAAI,CAAJ,GAAI;AACnB,GAA+B,CAA/B,UAA+B;;;;;;AAEpD,KAAK,CAAC,aAAa,GAHiB,GAAI,WAGR,aAAa;eAEvB,aAAa,CACjC,MAAc,EACd,IAAY,IAEV,WAAW,EAAG,EAAE,GAChB,SAAS,EAAG,KAAK,GACjB,MAAM,MAAS,IAAI;;GAMN,CAAC;IAChB,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG;IAC3B,KAAK,CAAC,IAAI,GApBK,KAAM,SAoBH,OAAO,CAAC,OAAO,EAAE,MAAM;IACzC,KAAK,CAAC,EAAE,GArBO,KAAM,SAqBL,OAAO,CAAC,OAAO,EAAE,IAAI;IAErC,KAAK,CAAC,IAAI,GAAG,GAAG,CArBG,UAA+B,MAqB5B,WAAW;mBAElB,KAAK,CAAC,IAAY,EAAiB,CAAC;QACjD,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE;QACpC,KAAK,CAAC,KAAK,SA1BqB,GAAI,UA0BP,IAAI,CAAC,IAAI;cAEhC,IAAI,CAAC,OAAO;QAElB,EAAE,EAAE,KAAK,CAAC,WAAW,IAAI,CAAC;gBACpB,CAAC;sBA/ByB,GAAI,UAgCjB,KAAK,CAAC,MAAM;YAC7B,CAAC,QAAQ,GAAG,EAAE,CAAC;gBACb,EAA8C,AAA9C,4CAA8C;gBAC9C,EAAE,EAAE,GAAG,CAAC,IAAI,MAAK,MAAQ,GAAE,CAAC;oBAC1B,KAAK,CAAC,GAAG;gBACX,CAAC;YACH,CAAC;YACD,IAAI,CAAC,OAAO;YACZ,KAAK,CAAC,KAAK,SAxCmB,GAAI,UAwCL,OAAO,CAAC,IAAI;kBACnC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,GAAK,KAAK,CA1ChC,KAAM,SA0CgC,IAAI,CAAC,IAAI,EAAE,IAAI;;QAClE,CAAC,MAAM,EAAE,EACP,KAAK,CAAC,MAAM,MACZ,EAAoC,AAApC,kCAAoC;QACpC,EAA8D,AAA9D,4DAA8D;QAC9D,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,MAAM,OAAO,SAAQ,CAAG,KAChD,CAAC;kBA/C6B,GAAI,UAgDnB,QAAQ,CACrB,IAAI,EACJ,MAAM,EACN,SAAS,GAAG,SAAS,GAAG,aAAa;YAEvC,IAAI,CAAC,OAAO;QACd,CAAC;IACH,CAAC;UAEK,KAAK,CAAC,IAAI;AAClB,CAAC"}