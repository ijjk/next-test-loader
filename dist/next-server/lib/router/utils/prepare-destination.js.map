{"version":3,"sources":["../../../../../next-server/lib/router/utils/prepare-destination.ts"],"names":["compileNonPath","value","params","includes","key","Object","keys","replace","RegExp","pathToRegexp","compile","validate","substr","prepareDestination","destination","query","appendParamsToQuery","basePath","parsedDestination","assign","__nextLocale","startsWith","pathname","searchParams","hash","hostname","port","protocol","search","href","URL","destQuery","destPath","destPathParamKeys","destPathParams","map","name","destinationCompiler","newUrl","strOrArray","entries","Array","isArray","paramKeys","some","shouldAddBasePath","split","err","message","match","Error"],"mappings":"8GACA,0CACA,sDACA,uF,qzBAIO,QAASA,CAAAA,cAAT,CAAwBC,KAAxB,CAAuCC,MAAvC,CAA+D,CACpE,GAAI,CAACD,KAAK,CAACE,QAAN,CAAe,GAAf,CAAL,CAA0B,CACxB,MAAOF,CAAAA,KAAP,CACD,CAED,IAAK,KAAMG,CAAAA,GAAX,GAAkBC,CAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAlB,CAAuC,CACrC,GAAID,KAAK,CAACE,QAAN,CAAgB,IAAGC,GAAI,EAAvB,CAAJ,CAA+B,CAC7BH,KAAK,CAAGA,KAAK,CACVM,OADK,CAEJ,GAAIC,CAAAA,MAAJ,CAAY,IAAGJ,GAAI,KAAnB,CAAyB,GAAzB,CAFI,CAGH,IAAGA,GAAI,2BAHJ,EAKLG,OALK,CAMJ,GAAIC,CAAAA,MAAJ,CAAY,IAAGJ,GAAI,KAAnB,CAAyB,GAAzB,CANI,CAOH,IAAGA,GAAI,0BAPJ,EASLG,OATK,CASG,GAAIC,CAAAA,MAAJ,CAAY,IAAGJ,GAAI,KAAnB,CAAyB,GAAzB,CATH,CASmC,IAAGA,GAAI,sBAT1C,EAULG,OAVK,CAWJ,GAAIC,CAAAA,MAAJ,CAAY,IAAGJ,GAAI,SAAnB,CAA6B,GAA7B,CAXI,CAYH,wBAAuBA,GAAI,EAZxB,CAAR,CAcD,CACF,CACDH,KAAK,CAAGA,KAAK,CACVM,OADK,CACG,2BADH,CACgC,MADhC,EAELA,OAFK,CAEG,uBAFH,CAE4B,GAF5B,EAGLA,OAHK,CAGG,wBAHH,CAG6B,GAH7B,EAILA,OAJK,CAIG,2BAJH,CAIgC,GAJhC,EAKLA,OALK,CAKG,4BALH,CAKiC,GALjC,CAAR,CAOA;AACA;AACA,MAAOE,CAAAA,YAAY,CAChBC,OADI,CACK,IAAGT,KAAM,EADd,CACiB,CAAEU,QAAQ,CAAE,KAAZ,CADjB,EACsCT,MADtC,EAEJU,MAFI,CAEG,CAFH,CAAP,CAGD,CAEc,QAASC,CAAAA,kBAAT,CACbC,WADa,CAEbZ,MAFa,CAGba,KAHa,CAIbC,mBAJa,CAKbC,QALa,CAMb,CACA,GAAIC,CAAAA,iBAKmC,CAAG,EAL1C,CAOA;AACAH,KAAK,CAAGV,MAAM,CAACc,MAAP,CAAc,EAAd,CAAkBJ,KAAlB,CAAR,CACA,MAAOA,CAAAA,KAAK,CAACK,YAAb,CAEA,GAAIN,WAAW,CAACO,UAAZ,CAAuB,GAAvB,CAAJ,CAAiC,CAC/BH,iBAAiB,CAAG,uCAAiBJ,WAAjB,CAApB,CACD,CAFD,IAEO,CACL,KAAM,CACJQ,QADI,CAEJC,YAFI,CAGJC,IAHI,CAIJC,QAJI,CAKJC,IALI,CAMJC,QANI,CAOJC,MAPI,CAQJC,IARI,EASF,GAAIC,CAAAA,GAAJ,CAAQhB,WAAR,CATJ,CAWAI,iBAAiB,CAAG,CAClBI,QADkB,CAElBP,KAAK,CAAE,wCAAuBQ,YAAvB,CAFW,CAGlBC,IAHkB,CAIlBG,QAJkB,CAKlBF,QALkB,CAMlBC,IANkB,CAOlBE,MAPkB,CAQlBC,IARkB,CAApB,CAUD,CAED,KAAME,CAAAA,SAAS,CAAGb,iBAAiB,CAACH,KAApC,CACA,KAAMiB,CAAAA,QAAQ,CAAI,GAAEd,iBAAiB,CAACI,QAAU,GAC9CJ,iBAAiB,CAACM,IAAlB,EAA0B,EAC3B,EAFD,CAGA,KAAMS,CAAAA,iBAAqC,CAAG,EAA9C,CACAxB,YAAY,CAACA,YAAb,CAA0BuB,QAA1B,CAAoCC,iBAApC,EAEA,KAAMC,CAAAA,cAAc,CAAGD,iBAAiB,CAACE,GAAlB,CAAuB/B,GAAD,EAASA,GAAG,CAACgC,IAAnC,CAAvB,CAEA,GAAIC,CAAAA,mBAAmB,CAAG5B,YAAY,CAACC,OAAb,CACxBsB,QADwB,CAExB;AACA;AACA;AACA;AACA;AACA;AACA,CAAErB,QAAQ,CAAE,KAAZ,CARwB,CAA1B,CAUA,GAAI2B,CAAAA,MAAJ,CAEA;AACA,IAAK,KAAM,CAAClC,GAAD,CAAMmC,UAAN,CAAX,EAAgClC,CAAAA,MAAM,CAACmC,OAAP,CAAeT,SAAf,CAAhC,CAA2D,CACzD,GAAI9B,CAAAA,KAAK,CAAGwC,KAAK,CAACC,OAAN,CAAcH,UAAd,EAA4BA,UAAU,CAAC,CAAD,CAAtC,CAA4CA,UAAxD,CACA,GAAItC,KAAJ,CAAW,CACT;AACA;AACAA,KAAK,CAAGD,cAAc,CAACC,KAAD,CAAQC,MAAR,CAAtB,CACD,CACD6B,SAAS,CAAC3B,GAAD,CAAT,CAAiBH,KAAjB,CACD,CAED;AACA;AACA,KAAM0C,CAAAA,SAAS,CAAGtC,MAAM,CAACC,IAAP,CAAYJ,MAAZ,CAAlB,CAEA,GACEc,mBAAmB,EACnB,CAAC2B,SAAS,CAACC,IAAV,CAAgBxC,GAAD,EAAS8B,cAAc,CAAC/B,QAAf,CAAwBC,GAAxB,CAAxB,CAFH,CAGE,CACA,IAAK,KAAMA,CAAAA,GAAX,GAAkBuC,CAAAA,SAAlB,CAA6B,CAC3B,GAAI,EAAEvC,GAAG,GAAI2B,CAAAA,SAAT,CAAJ,CAAyB,CACvBA,SAAS,CAAC3B,GAAD,CAAT,CAAiBF,MAAM,CAACE,GAAD,CAAvB,CACD,CACF,CACF,CAED,KAAMyC,CAAAA,iBAAiB,CAAG/B,WAAW,CAACO,UAAZ,CAAuB,GAAvB,GAA+BJ,QAAzD,CAEA,GAAI,CACFqB,MAAM,CAAI,GAAEO,iBAAiB,CAAG5B,QAAH,CAAc,EAAG,GAAEoB,mBAAmB,CACjEnC,MADiE,CAEjE,EAFF,CAIA,KAAM,CAACoB,QAAD,CAAWE,IAAX,EAAmBc,MAAM,CAACQ,KAAP,CAAa,GAAb,CAAzB,CACA5B,iBAAiB,CAACI,QAAlB,CAA6BA,QAA7B,CACAJ,iBAAiB,CAACM,IAAlB,CAA0B,GAAEA,IAAI,CAAG,GAAH,CAAS,EAAG,GAAEA,IAAI,EAAI,EAAG,EAAzD,CACA,MAAON,CAAAA,iBAAiB,CAACU,MAAzB,CACD,CAAC,MAAOmB,GAAP,CAAY,CACZ,GAAIA,GAAG,CAACC,OAAJ,CAAYC,KAAZ,CAAkB,8CAAlB,CAAJ,CAAuE,CACrE,KAAM,IAAIC,CAAAA,KAAJ,CACH,wKADG,CAAN,CAGD,CACD,KAAMH,CAAAA,GAAN,CACD,CAED;AACA;AACA;AACA;AACA7B,iBAAiB,CAACH,KAAlB,CAA0B,CACxB,GAAGA,KADqB,CAExB,GAAGG,iBAAiB,CAACH,KAFG,CAA1B,CAKA,MAAO,CACLuB,MADK,CAELpB,iBAFK,CAAP,CAID","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport { searchParamsToUrlQuery } from './querystring'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\n\ntype Params = { [param: string]: any }\n\nexport function compileNonPath(value: string, params: Params): string {\n  if (!value.includes(':')) {\n    return value\n  }\n\n  for (const key of Object.keys(params)) {\n    if (value.includes(`:${key}`)) {\n      value = value\n        .replace(\n          new RegExp(`:${key}\\\\*`, 'g'),\n          `:${key}--ESCAPED_PARAM_ASTERISKS`\n        )\n        .replace(\n          new RegExp(`:${key}\\\\?`, 'g'),\n          `:${key}--ESCAPED_PARAM_QUESTION`\n        )\n        .replace(new RegExp(`:${key}\\\\+`, 'g'), `:${key}--ESCAPED_PARAM_PLUS`)\n        .replace(\n          new RegExp(`:${key}(?!\\\\w)`, 'g'),\n          `--ESCAPED_PARAM_COLON${key}`\n        )\n    }\n  }\n  value = value\n    .replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, '\\\\$1')\n    .replace(/--ESCAPED_PARAM_PLUS/g, '+')\n    .replace(/--ESCAPED_PARAM_COLON/g, ':')\n    .replace(/--ESCAPED_PARAM_QUESTION/g, '?')\n    .replace(/--ESCAPED_PARAM_ASTERISKS/g, '*')\n\n  // the value needs to start with a forward-slash to be compiled\n  // correctly\n  return pathToRegexp\n    .compile(`/${value}`, { validate: false })(params)\n    .substr(1)\n}\n\nexport default function prepareDestination(\n  destination: string,\n  params: Params,\n  query: ParsedUrlQuery,\n  appendParamsToQuery: boolean,\n  basePath: string\n) {\n  let parsedDestination: {\n    query?: ParsedUrlQuery\n    protocol?: string\n    hostname?: string\n    port?: string\n  } & ReturnType<typeof parseRelativeUrl> = {} as any\n\n  // clone query so we don't modify the original\n  query = Object.assign({}, query)\n  delete query.__nextLocale\n\n  if (destination.startsWith('/')) {\n    parsedDestination = parseRelativeUrl(destination)\n  } else {\n    const {\n      pathname,\n      searchParams,\n      hash,\n      hostname,\n      port,\n      protocol,\n      search,\n      href,\n    } = new URL(destination)\n\n    parsedDestination = {\n      pathname,\n      query: searchParamsToUrlQuery(searchParams),\n      hash,\n      protocol,\n      hostname,\n      port,\n      search,\n      href,\n    }\n  }\n\n  const destQuery = parsedDestination.query\n  const destPath = `${parsedDestination.pathname!}${\n    parsedDestination.hash || ''\n  }`\n  const destPathParamKeys: pathToRegexp.Key[] = []\n  pathToRegexp.pathToRegexp(destPath, destPathParamKeys)\n\n  const destPathParams = destPathParamKeys.map((key) => key.name)\n\n  let destinationCompiler = pathToRegexp.compile(\n    destPath,\n    // we don't validate while compiling the destination since we should\n    // have already validated before we got to this point and validating\n    // breaks compiling destinations with named pattern params from the source\n    // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n    // since compile validation is meant for reversing and not for inserting\n    // params from a separate path-regex into another\n    { validate: false }\n  )\n  let newUrl\n\n  // update any params in query values\n  for (const [key, strOrArray] of Object.entries(destQuery)) {\n    let value = Array.isArray(strOrArray) ? strOrArray[0] : strOrArray\n    if (value) {\n      // the value needs to start with a forward-slash to be compiled\n      // correctly\n      value = compileNonPath(value, params)\n    }\n    destQuery[key] = value\n  }\n\n  // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n  const paramKeys = Object.keys(params)\n\n  if (\n    appendParamsToQuery &&\n    !paramKeys.some((key) => destPathParams.includes(key))\n  ) {\n    for (const key of paramKeys) {\n      if (!(key in destQuery)) {\n        destQuery[key] = params[key]\n      }\n    }\n  }\n\n  const shouldAddBasePath = destination.startsWith('/') && basePath\n\n  try {\n    newUrl = `${shouldAddBasePath ? basePath : ''}${destinationCompiler(\n      params\n    )}`\n\n    const [pathname, hash] = newUrl.split('#')\n    parsedDestination.pathname = pathname\n    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`\n    delete parsedDestination.search\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(\n        `To use a multi-match in the destination you must add \\`*\\` at the end of the param name to signify it should repeat. https://err.sh/vercel/next.js/invalid-multi-match`\n      )\n    }\n    throw err\n  }\n\n  // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n  parsedDestination.query = {\n    ...query,\n    ...parsedDestination.query,\n  }\n\n  return {\n    newUrl,\n    parsedDestination,\n  }\n}\n"]}