{"version":3,"sources":["../../../../../next-server/lib/router/utils/prepare-destination.ts"],"names":["getSafeParamName","paramName","newParamName","i","length","charCode","charCodeAt","matchHas","req","has","query","params","allMatch","every","hasItem","value","key","type","toLowerCase","headers","cookies","matcher","RegExp","matches","match","groups","Object","keys","forEach","groupKey","safeKey","compileNonPath","includes","replace","pathToRegexp","compile","validate","substr","prepareDestination","destination","appendParamsToQuery","parsedDestination","assign","hadLocale","__nextLocale","__nextDefaultLocale","startsWith","pathname","searchParams","hash","hostname","port","protocol","search","href","URL","destQuery","destPath","destPathParamKeys","destPathParams","map","name","destinationCompiler","newUrl","strOrArray","entries","Array","isArray","paramKeys","filter","some","split","err","message","Error"],"mappings":"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","sourcesContent":["import { IncomingMessage } from 'http'\nimport { ParsedUrlQuery } from 'querystring'\nimport { searchParamsToUrlQuery } from './querystring'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\nimport { RouteHas } from '../../../../lib/load-custom-routes'\n\ntype Params = { [param: string]: any }\n\n// ensure only a-zA-Z are used for param names for proper interpolating\n// with path-to-regexp\nconst getSafeParamName = (paramName: string) => {\n  let newParamName = ''\n\n  for (let i = 0; i < paramName.length; i++) {\n    const charCode = paramName.charCodeAt(i)\n\n    if (\n      (charCode > 64 && charCode < 91) || // A-Z\n      (charCode > 96 && charCode < 123) // a-z\n    ) {\n      newParamName += paramName[i]\n    }\n  }\n  return newParamName\n}\n\nexport function matchHas(\n  req: IncomingMessage,\n  has: RouteHas[],\n  query: Params\n): false | Params {\n  const params: Params = {}\n  const allMatch = has.every((hasItem) => {\n    let value: undefined | string\n    let key = hasItem.key\n\n    if (hasItem.type === 'header') {\n      key = key.toLowerCase()\n      value = req.headers[key] as string\n    } else if (hasItem.type === 'cookie') {\n      value = (req as any).cookies[hasItem.key]\n    } else if (hasItem.type === 'query') {\n      value = query[key]\n    }\n\n    if (!hasItem.value && value) {\n      params[getSafeParamName(key)] = value\n      return true\n    } else if (value) {\n      const matcher = new RegExp(`^${hasItem.value}$`)\n      const matches = value.match(matcher)\n\n      if (matches) {\n        if (matches.groups) {\n          Object.keys(matches.groups).forEach((groupKey) => {\n            const safeKey = getSafeParamName(groupKey)\n\n            if (safeKey && matches.groups![groupKey]) {\n              params[safeKey] = matches.groups![groupKey]\n            }\n          })\n        } else {\n          params[getSafeParamName(key)] = matches[0]\n        }\n        return true\n      }\n    }\n    return false\n  })\n\n  if (allMatch) {\n    return params\n  }\n  return false\n}\n\nexport function compileNonPath(value: string, params: Params): string {\n  if (!value.includes(':')) {\n    return value\n  }\n\n  for (const key of Object.keys(params)) {\n    if (value.includes(`:${key}`)) {\n      value = value\n        .replace(\n          new RegExp(`:${key}\\\\*`, 'g'),\n          `:${key}--ESCAPED_PARAM_ASTERISKS`\n        )\n        .replace(\n          new RegExp(`:${key}\\\\?`, 'g'),\n          `:${key}--ESCAPED_PARAM_QUESTION`\n        )\n        .replace(new RegExp(`:${key}\\\\+`, 'g'), `:${key}--ESCAPED_PARAM_PLUS`)\n        .replace(\n          new RegExp(`:${key}(?!\\\\w)`, 'g'),\n          `--ESCAPED_PARAM_COLON${key}`\n        )\n    }\n  }\n  value = value\n    .replace(/(:|\\*|\\?|\\+|\\(|\\)|\\{|\\})/g, '\\\\$1')\n    .replace(/--ESCAPED_PARAM_PLUS/g, '+')\n    .replace(/--ESCAPED_PARAM_COLON/g, ':')\n    .replace(/--ESCAPED_PARAM_QUESTION/g, '?')\n    .replace(/--ESCAPED_PARAM_ASTERISKS/g, '*')\n\n  // the value needs to start with a forward-slash to be compiled\n  // correctly\n  return pathToRegexp\n    .compile(`/${value}`, { validate: false })(params)\n    .substr(1)\n}\n\nexport default function prepareDestination(\n  destination: string,\n  params: Params,\n  query: ParsedUrlQuery,\n  appendParamsToQuery: boolean\n) {\n  let parsedDestination: {\n    query?: ParsedUrlQuery\n    protocol?: string\n    hostname?: string\n    port?: string\n  } & ReturnType<typeof parseRelativeUrl> = {} as any\n\n  // clone query so we don't modify the original\n  query = Object.assign({}, query)\n  const hadLocale = query.__nextLocale\n  delete query.__nextLocale\n  delete query.__nextDefaultLocale\n\n  if (destination.startsWith('/')) {\n    parsedDestination = parseRelativeUrl(destination)\n  } else {\n    const {\n      pathname,\n      searchParams,\n      hash,\n      hostname,\n      port,\n      protocol,\n      search,\n      href,\n    } = new URL(destination)\n\n    parsedDestination = {\n      pathname,\n      query: searchParamsToUrlQuery(searchParams),\n      hash,\n      protocol,\n      hostname,\n      port,\n      search,\n      href,\n    }\n  }\n\n  const destQuery = parsedDestination.query\n  const destPath = `${parsedDestination.pathname!}${\n    parsedDestination.hash || ''\n  }`\n  const destPathParamKeys: pathToRegexp.Key[] = []\n  pathToRegexp.pathToRegexp(destPath, destPathParamKeys)\n\n  const destPathParams = destPathParamKeys.map((key) => key.name)\n\n  let destinationCompiler = pathToRegexp.compile(\n    destPath,\n    // we don't validate while compiling the destination since we should\n    // have already validated before we got to this point and validating\n    // breaks compiling destinations with named pattern params from the source\n    // e.g. /something:hello(.*) -> /another/:hello is broken with validation\n    // since compile validation is meant for reversing and not for inserting\n    // params from a separate path-regex into another\n    { validate: false }\n  )\n  let newUrl\n\n  // update any params in query values\n  for (const [key, strOrArray] of Object.entries(destQuery)) {\n    let value = Array.isArray(strOrArray) ? strOrArray[0] : strOrArray\n    if (value) {\n      // the value needs to start with a forward-slash to be compiled\n      // correctly\n      value = compileNonPath(value, params)\n    }\n    destQuery[key] = value\n  }\n\n  // add path params to query if it's not a redirect and not\n  // already defined in destination query or path\n  let paramKeys = Object.keys(params)\n\n  // remove internal param for i18n\n  if (hadLocale) {\n    paramKeys = paramKeys.filter((name) => name !== 'nextInternalLocale')\n  }\n\n  if (\n    appendParamsToQuery &&\n    !paramKeys.some((key) => destPathParams.includes(key))\n  ) {\n    for (const key of paramKeys) {\n      if (!(key in destQuery)) {\n        destQuery[key] = params[key]\n      }\n    }\n  }\n\n  try {\n    newUrl = destinationCompiler(params)\n\n    const [pathname, hash] = newUrl.split('#')\n    parsedDestination.pathname = pathname\n    parsedDestination.hash = `${hash ? '#' : ''}${hash || ''}`\n    delete (parsedDestination as any).search\n  } catch (err) {\n    if (err.message.match(/Expected .*? to not repeat, but got an array/)) {\n      throw new Error(\n        `To use a multi-match in the destination you must add \\`*\\` at the end of the param name to signify it should repeat. https://err.sh/vercel/next.js/invalid-multi-match`\n      )\n    }\n    throw err\n  }\n\n  // Query merge order lowest priority to highest\n  // 1. initial URL query values\n  // 2. path segment values\n  // 3. destination specified query values\n  parsedDestination.query = {\n    ...query,\n    ...parsedDestination.query,\n  }\n\n  return {\n    newUrl,\n    parsedDestination,\n  }\n}\n"]}