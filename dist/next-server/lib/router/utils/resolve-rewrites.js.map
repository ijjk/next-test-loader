{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","resolveRewrites","asPath","pages","basePath","rewrites","query","includes","rewrite","matcher","source","params","destination","destRes","parsedDestination","pathname","Object","assign"],"mappings":"qEACA,iFACA,iF,mFAGA,KAAMA,CAAAA,kBAAkB,CAAG,uBAAU,IAAV,CAA3B,CAEe,QAASC,CAAAA,eAAT,CACbC,MADa,CAEbC,KAFa,CAGbC,QAHa,CAIbC,QAJa,CAKbC,KALa,CAMb,CACA,GAAI,CAACH,KAAK,CAACI,QAAN,CAAeL,MAAf,CAAL,CAA6B,CAC3B,IAAK,KAAMM,CAAAA,OAAX,GAAsBH,CAAAA,QAAtB,CAAgC,CAC9B,KAAMI,CAAAA,OAAO,CAAGT,kBAAkB,CAACQ,OAAO,CAACE,MAAT,CAAlC,CACA,KAAMC,CAAAA,MAAM,CAAGF,OAAO,CAACP,MAAD,CAAtB,CAEA,GAAIS,MAAJ,CAAY,CACV,GAAI,CAACH,OAAO,CAACI,WAAb,CAA0B,CACxB;AACA,MACD,CACD,KAAMC,CAAAA,OAAO,CAAG,gCACdL,OAAO,CAACI,WADM,CAEdD,MAFc,CAGdL,KAHc,CAId,IAJc,CAKdE,OAAO,CAACJ,QAAR,GAAqB,KAArB,CAA6B,EAA7B,CAAkCA,QALpB,CAAhB,CAOAF,MAAM,CAAGW,OAAO,CAACC,iBAAR,CAA0BC,QAAnC,CACAC,MAAM,CAACC,MAAP,CAAcX,KAAd,CAAqBO,OAAO,CAACC,iBAAR,CAA0BR,KAA/C,EAEA,GAAIH,KAAK,CAACI,QAAN,CAAeL,MAAf,CAAJ,CAA4B,CAC1B;AACA;AACA,MACD,CACF,CACF,CACF,CACD,MAAOA,CAAAA,MAAP,CACD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from '../../../server/lib/path-match'\nimport prepareDestination from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  basePath: string,\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery\n) {\n  if (!pages.includes(asPath)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      const params = matcher(asPath)\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true,\n          rewrite.basePath === false ? '' : basePath\n        )\n        asPath = destRes.parsedDestination.pathname!\n        Object.assign(query, destRes.parsedDestination.query)\n\n        if (pages.includes(asPath)) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          break\n        }\n      }\n    }\n  }\n  return asPath\n}\n"]}