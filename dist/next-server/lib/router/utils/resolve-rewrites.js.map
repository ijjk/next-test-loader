{"version":3,"sources":["../../../../../next-server/lib/router/utils/resolve-rewrites.ts"],"names":["customRouteMatcher","resolveRewrites","asPath","pages","rewrites","query","resolveHref","locales","matchedPage","parsedAs","fsPathname","pathname","resolvedHref","includes","rewrite","matcher","source","params","has","hasParams","headers","cookies","Object","fromEntries","document","cookie","split","map","item","key","value","join","assign","destination","destRes","parsedDestination","newUrl"],"mappings":"qEACA,+DACA,kFAEA,mFACA,qEACA,sDACA,iC,w4BAEA,KAAMA,CAAAA,kBAAkB,CAAG,uBAAU,IAAV,CAA3B,CAEe,QAASC,CAAAA,eAAT,CACbC,MADa,CAEbC,KAFa,CAGbC,QAHa,CAIbC,KAJa,CAKbC,WALa,CAMbC,OANa,CAYb,CACA,GAAIC,CAAAA,WAAW,CAAG,KAAlB,CACA,GAAIC,CAAAA,QAAQ,CAAG,uCAAiBP,MAAjB,CAAf,CACA,GAAIQ,CAAAA,UAAU,CAAG,oDACf,6CAAoB,wBAAYD,QAAQ,CAACE,QAArB,CAApB,CAAoDJ,OAApD,EAA6DI,QAD9C,CAAjB,CAGA,GAAIC,CAAAA,YAAJ,CAEA,GAAI,CAACT,KAAK,CAACU,QAAN,CAAeH,UAAf,CAAL,CAAiC,CAC/B,IAAK,KAAMI,CAAAA,OAAX,GAAsBV,CAAAA,QAAtB,CAAgC,CAC9B,KAAMW,CAAAA,OAAO,CAAGf,kBAAkB,CAACc,OAAO,CAACE,MAAT,CAAlC,CACA,GAAIC,CAAAA,MAAM,CAAGF,OAAO,CAACN,QAAQ,CAACE,QAAV,CAApB,CAEA,GAAIG,OAAO,CAACI,GAAR,EAAeD,MAAnB,CAA2B,CACzB,KAAME,CAAAA,SAAS,CAAG,iCAChB,CACEC,OAAO,CAAE,EADX,CAEEC,OAAO,CAAEC,MAAM,CAACC,WAAP,CACPC,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsB,IAAtB,EAA4BC,GAA5B,CAAiCC,IAAD,EAAU,CACxC,KAAM,CAACC,GAAD,CAAM,GAAGC,KAAT,EAAkBF,IAAI,CAACF,KAAL,CAAW,GAAX,CAAxB,CACA,MAAO,CAACG,GAAD,CAAMC,KAAK,CAACC,IAAN,CAAW,GAAX,CAAN,CAAP,CACD,CAHD,CADO,CAFX,CADgB,CAUhBjB,OAAO,CAACI,GAVQ,CAWhBT,QAAQ,CAACJ,KAXO,CAAlB,CAcA,GAAIc,SAAJ,CAAe,CACbG,MAAM,CAACU,MAAP,CAAcf,MAAd,CAAsBE,SAAtB,EACD,CAFD,IAEO,CACLF,MAAM,CAAG,KAAT,CACD,CACF,CAED,GAAIA,MAAJ,CAAY,CACV,GAAI,CAACH,OAAO,CAACmB,WAAb,CAA0B,CACxB;AACA,MACD,CACD,KAAMC,CAAAA,OAAO,CAAG,gCACdpB,OAAO,CAACmB,WADM,CAEdhB,MAFc,CAGdZ,KAHc,CAId,IAJc,CAAhB,CAMAI,QAAQ,CAAGyB,OAAO,CAACC,iBAAnB,CACAjC,MAAM,CAAGgC,OAAO,CAACE,MAAjB,CACAd,MAAM,CAACU,MAAP,CAAc3B,KAAd,CAAqB6B,OAAO,CAACC,iBAAR,CAA0B9B,KAA/C,EAEAK,UAAU,CAAG,oDACX,6CAAoB,wBAAYR,MAAZ,CAApB,CAAyCK,OAAzC,EAAkDI,QADvC,CAAb,CAIA,GAAIR,KAAK,CAACU,QAAN,CAAeH,UAAf,CAAJ,CAAgC,CAC9B;AACA;AACAF,WAAW,CAAG,IAAd,CACAI,YAAY,CAAGF,UAAf,CACA,MACD,CAED;AACAE,YAAY,CAAGN,WAAW,CAACI,UAAD,CAA1B,CAEA,GAAIE,YAAY,GAAKV,MAAjB,EAA2BC,KAAK,CAACU,QAAN,CAAeD,YAAf,CAA/B,CAA6D,CAC3DJ,WAAW,CAAG,IAAd,CACA,MACD,CACF,CACF,CACF,CACD,MAAO,CACLN,MADK,CAELO,QAFK,CAGLD,WAHK,CAILI,YAJK,CAAP,CAMD","sourcesContent":["import { ParsedUrlQuery } from 'querystring'\nimport pathMatch from './path-match'\nimport prepareDestination, { matchHas } from './prepare-destination'\nimport { Rewrite } from '../../../../lib/load-custom-routes'\nimport { removePathTrailingSlash } from '../../../../client/normalize-trailing-slash'\nimport { normalizeLocalePath } from '../../i18n/normalize-locale-path'\nimport { parseRelativeUrl } from './parse-relative-url'\nimport { delBasePath } from '../router'\n\nconst customRouteMatcher = pathMatch(true)\n\nexport default function resolveRewrites(\n  asPath: string,\n  pages: string[],\n  rewrites: Rewrite[],\n  query: ParsedUrlQuery,\n  resolveHref: (path: string) => string,\n  locales?: string[]\n): {\n  matchedPage: boolean\n  parsedAs: ReturnType<typeof parseRelativeUrl>\n  asPath: string\n  resolvedHref?: string\n} {\n  let matchedPage = false\n  let parsedAs = parseRelativeUrl(asPath)\n  let fsPathname = removePathTrailingSlash(\n    normalizeLocalePath(delBasePath(parsedAs.pathname), locales).pathname\n  )\n  let resolvedHref\n\n  if (!pages.includes(fsPathname)) {\n    for (const rewrite of rewrites) {\n      const matcher = customRouteMatcher(rewrite.source)\n      let params = matcher(parsedAs.pathname)\n\n      if (rewrite.has && params) {\n        const hasParams = matchHas(\n          {\n            headers: {},\n            cookies: Object.fromEntries(\n              document.cookie.split('; ').map((item) => {\n                const [key, ...value] = item.split('=')\n                return [key, value.join('=')]\n              })\n            ),\n          } as any,\n          rewrite.has,\n          parsedAs.query\n        )\n\n        if (hasParams) {\n          Object.assign(params, hasParams)\n        } else {\n          params = false\n        }\n      }\n\n      if (params) {\n        if (!rewrite.destination) {\n          // this is a proxied rewrite which isn't handled on the client\n          break\n        }\n        const destRes = prepareDestination(\n          rewrite.destination,\n          params,\n          query,\n          true\n        )\n        parsedAs = destRes.parsedDestination\n        asPath = destRes.newUrl\n        Object.assign(query, destRes.parsedDestination.query)\n\n        fsPathname = removePathTrailingSlash(\n          normalizeLocalePath(delBasePath(asPath), locales).pathname\n        )\n\n        if (pages.includes(fsPathname)) {\n          // check if we now match a page as this means we are done\n          // resolving the rewrites\n          matchedPage = true\n          resolvedHref = fsPathname\n          break\n        }\n\n        // check if we match a dynamic-route, if so we break the rewrites chain\n        resolvedHref = resolveHref(fsPathname)\n\n        if (resolvedHref !== asPath && pages.includes(resolvedHref)) {\n          matchedPage = true\n          break\n        }\n      }\n    }\n  }\n  return {\n    asPath,\n    parsedAs,\n    matchedPage,\n    resolvedHref,\n  }\n}\n"]}