{"version":3,"sources":["../../../../../next-server/lib/router/utils/route-regex.ts"],"names":["escapeRegex","str","replace","getRouteRegex","normalizedRoute","escapedRoute","groups","groupIndex","parameterizedRoute","_","$1","isOptional","test","slice","isCatchAll","pos","repeat","optional","namedParameterizedRoute","window","routeKeys","key","cleanedKey","re","RegExp","namedRegex"],"mappings":"yEAAA;AACA;AACA,QAASA,CAAAA,WAAT,CAAqBC,GAArB,CAAkC,CAChC,MAAOA,CAAAA,GAAG,CAACC,OAAJ,CAAY,sBAAZ,CAAoC,MAApC,CAAP,CACD,CAEM,QAASC,CAAAA,aAAT,CACLC,eADK,CASL,CACA;AACA,KAAMC,CAAAA,YAAY,CAAGL,WAAW,CAACI,eAAe,CAACF,OAAhB,CAAwB,KAAxB,CAA+B,EAA/B,GAAsC,GAAvC,CAAhC,CAEA,KAAMI,CAAAA,MAEL,CAAG,EAFJ,CAGA,GAAIC,CAAAA,UAAU,CAAG,CAAjB,CAEA,KAAMC,CAAAA,kBAAkB,CAAGH,YAAY,CAACH,OAAb,CACzB,6BADyB,CAEzB,CAACO,CAAD,CAAIC,EAAJ,GAAW,CACT,KAAMC,CAAAA,UAAU,CAAG,eAAeC,IAAf,CAAoBF,EAApB,CAAnB,CACA,GAAIC,UAAJ,CAAgB,CACdD,EAAE,CAAGA,EAAE,CAACG,KAAH,CAAS,CAAT,CAAY,CAAC,CAAb,CAAL,CACD,CACD,KAAMC,CAAAA,UAAU,CAAG,aAAaF,IAAb,CAAkBF,EAAlB,CAAnB,CACA,GAAII,UAAJ,CAAgB,CACdJ,EAAE,CAAGA,EAAE,CAACG,KAAH,CAAS,CAAT,CAAL,CACD,CACDP,MAAM,CACJI,EACE;AADA,CAECR,OAFH,CAEW,0BAFX,CAEuC,IAFvC,CAGA;AAJI,CAAN,CAKI,CAAEa,GAAG,CAAER,UAAU,EAAjB,CAAqBS,MAAM,CAAEF,UAA7B,CAAyCG,QAAQ,CAAEN,UAAnD,CALJ,CAMA,MAAOG,CAAAA,UAAU,CAAIH,UAAU,CAAG,aAAH,CAAmB,QAAjC,CAA6C,WAA9D,CACD,CAlBwB,CAA3B,CAqBA,GAAIO,CAAAA,uBAAJ,CAEA;AACA;AACA,GAAI,MAAOC,CAAAA,MAAP,GAAkB,WAAtB,CAAmC,CACjC,KAAMC,CAAAA,SAAsC,CAAG,EAA/C,CAEAF,uBAAuB,CAAGb,YAAY,CAACH,OAAb,CACxB,6BADwB,CAExB,CAACO,CAAD,CAAIC,EAAJ,GAAW,CACT,KAAMI,CAAAA,UAAU,CAAG,aAAaF,IAAb,CAAkBF,EAAlB,CAAnB,CACA,KAAMW,CAAAA,GAAG,CAAGX,EACV;AADY,CAEXR,OAFS,CAED,0BAFC,CAE2B,IAF3B,EAGTA,OAHS,CAGD,QAHC,CAGS,EAHT,CAAZ,CAKA;AACA;AACA,KAAMoB,CAAAA,UAAU,CAAGD,GAAG,CAACnB,OAAJ,CAAY,KAAZ,CAAmB,EAAnB,CAAnB,CAEAkB,SAAS,CAACE,UAAD,CAAT,CAAwBD,GAAxB,CAEA,MAAOP,CAAAA,UAAU,CACZ,OAAMQ,UAAW,OADL,CAEZ,OAAMA,UAAW,UAFtB,CAGD,CAlBuB,CAA1B,CAqBA,MAAO,CACLC,EAAE,CAAE,GAAIC,CAAAA,MAAJ,CAAW,IAAMhB,kBAAN,CAA2B,SAAtC,CAAiD,GAAjD,CADC,CAELF,MAFK,CAGLc,SAHK,CAILK,UAAU,CAAG,IAAGP,uBAAwB,SAJnC,CAAP,CAMD,CAED,MAAO,CACLK,EAAE,CAAE,GAAIC,CAAAA,MAAJ,CAAW,IAAMhB,kBAAN,CAA2B,SAAtC,CAAiD,GAAjD,CADC,CAELF,MAFK,CAAP,CAID","sourcesContent":["// this isn't importing the escape-string-regex module\n// to reduce bytes\nfunction escapeRegex(str: string) {\n  return str.replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&')\n}\n\nexport function getRouteRegex(\n  normalizedRoute: string\n): {\n  re: RegExp\n  namedRegex?: string\n  routeKeys?: { [named: string]: string }\n  groups: {\n    [groupName: string]: { pos: number; repeat: boolean; optional: boolean }\n  }\n} {\n  // Escape all characters that could be considered RegEx\n  const escapedRoute = escapeRegex(normalizedRoute.replace(/\\/$/, '') || '/')\n\n  const groups: {\n    [groupName: string]: { pos: number; repeat: boolean; optional: boolean }\n  } = {}\n  let groupIndex = 1\n\n  const parameterizedRoute = escapedRoute.replace(\n    /\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g,\n    (_, $1) => {\n      const isOptional = /^\\\\\\[.*\\\\\\]$/.test($1)\n      if (isOptional) {\n        $1 = $1.slice(2, -2)\n      }\n      const isCatchAll = /^(\\\\\\.){3}/.test($1)\n      if (isCatchAll) {\n        $1 = $1.slice(6)\n      }\n      groups[\n        $1\n          // Un-escape key\n          .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1')\n        // eslint-disable-next-line no-sequences\n      ] = { pos: groupIndex++, repeat: isCatchAll, optional: isOptional }\n      return isCatchAll ? (isOptional ? '(?:/(.+?))?' : '/(.+?)') : '/([^/]+?)'\n    }\n  )\n\n  let namedParameterizedRoute: string | undefined\n\n  // dead code eliminate for browser since it's only needed\n  // while generating routes-manifest\n  if (typeof window === 'undefined') {\n    const routeKeys: { [named: string]: string } = {}\n\n    namedParameterizedRoute = escapedRoute.replace(\n      /\\/\\\\\\[([^/]+?)\\\\\\](?=\\/|$)/g,\n      (_, $1) => {\n        const isCatchAll = /^(\\\\\\.){3}/.test($1)\n        const key = $1\n          // Un-escape key\n          .replace(/\\\\([|\\\\{}()[\\]^$+*?.-])/g, '$1')\n          .replace(/^\\.{3}/, '')\n\n        // replace any non-word characters since they can break\n        // the named regex\n        const cleanedKey = key.replace(/\\W/g, '')\n\n        routeKeys[cleanedKey] = key\n\n        return isCatchAll\n          ? `/(?<${cleanedKey}>.+?)`\n          : `/(?<${cleanedKey}>[^/]+?)`\n      }\n    )\n\n    return {\n      re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),\n      groups,\n      routeKeys,\n      namedRegex: `^${namedParameterizedRoute}(?:/)?$`,\n    }\n  }\n\n  return {\n    re: new RegExp('^' + parameterizedRoute + '(?:/)?$', 'i'),\n    groups,\n  }\n}\n"]}