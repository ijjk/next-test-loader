{"version":3,"sources":["../../../next-server/server/config-utils.ts"],"names":["installed","install","useWebpack5","require","shouldLoadWithWebpack5","phase","dir","path","CONFIG_FILE","cwd","length","userConfigModule","userConfig","default","future","webpack5","loadWebpackHook","worker","Worker","__filename","enableWorkerThreads","Boolean","end"],"mappings":"2JAAA,+DACA,0EACA,2DACA,2CACA,6C,mFAEA,GAAIA,CAAAA,SAAkB,CAAG,KAAzB,CAEO,QAASC,CAAAA,OAAT,CAAiBC,WAAjB,CAAuC,CAC5C,GAAIF,SAAJ,CAAe,CACb,OACD,CACDA,SAAS,CAAG,IAAZ,CAEA,kBAAYE,WAAZ,EAEA;AACA;AACAC,OAAO,CAAC,kCAAD,CAAP,CACD,CAEM,cAAeC,CAAAA,sBAAf,CACLC,KADK,CAELC,GAFK,CAGa,wBAClB,KAAMC,CAAAA,IAAI,CAAG,KAAM,oBAAOC,sBAAP,CAAoB,CACrCC,GAAG,CAAEH,GADgC,CAApB,CAAnB,CAIA;AACA,GAAI,EAACC,IAAD,QAACA,IAAI,CAAEG,MAAP,CAAJ,CAAmB,CACjB,MAAO,MAAP,CAAa;AACd,CAED;AACAT,OAAO,CAAC,KAAD,CAAP,CAEA,KAAMU,CAAAA,gBAAgB,CAAGR,OAAO,CAACI,IAAD,CAAhC,CACA,KAAMK,CAAAA,UAA+B,CAAG,kCACtCP,KADsC,CAEtCM,gBAAgB,CAACE,OAAjB,EAA4BF,gBAFU,CAAxC,CAKA;AACA,MAAO,qBAAAC,UAAU,CAACE,MAAX,kCAAmBC,QAAnB,IAAgC,IAAvC,CAA4C,4BAC7C,CAEM,cAAeC,CAAAA,eAAf,CAA+BX,KAA/B,CAA8CC,GAA9C,CAA2D,CAChE,GAAIJ,CAAAA,WAAW,CAAG,KAAlB,CACA,KAAMe,CAAAA,MAAW,CAAG,GAAIC,oBAAJ,CAAWC,UAAX,CAAuB,CAAEC,mBAAmB,CAAE,IAAvB,CAAvB,CAApB,CACA,GAAI,CACFlB,WAAW,CAAGmB,OAAO,CAAC,KAAMJ,CAAAA,MAAM,CAACb,sBAAP,CAA8BC,KAA9B,CAAqCC,GAArC,CAAP,CAArB,CACD,CAAC,cAAM,CACN;AACA;AACD,CALD,OAKU,CACRW,MAAM,CAACK,GAAP,GACD,CAEDrB,OAAO,CAACC,WAAD,CAAP,CACD","sourcesContent":["import Worker from 'jest-worker'\nimport findUp from 'next/dist/compiled/find-up'\nimport { init as initWebpack } from 'next/dist/compiled/webpack/webpack'\nimport { CONFIG_FILE } from '../lib/constants'\nimport { NextConfig, normalizeConfig } from './config-shared'\n\nlet installed: boolean = false\n\nexport function install(useWebpack5: boolean) {\n  if (installed) {\n    return\n  }\n  installed = true\n\n  initWebpack(useWebpack5)\n\n  // hook the Node.js require so that webpack requires are\n  // routed to the bundled and now initialized webpack version\n  require('../../build/webpack/require-hook')\n}\n\nexport async function shouldLoadWithWebpack5(\n  phase: string,\n  dir: string\n): Promise<boolean> {\n  const path = await findUp(CONFIG_FILE, {\n    cwd: dir,\n  })\n\n  // No `next.config.js`:\n  if (!path?.length) {\n    return false // TODO: return true to default to webpack 5\n  }\n\n  // Default to webpack 4 for backwards compatibility on boot:\n  install(false)\n\n  const userConfigModule = require(path)\n  const userConfig: Partial<NextConfig> = normalizeConfig(\n    phase,\n    userConfigModule.default || userConfigModule\n  )\n\n  // TODO: enable commented branch to enable webpack 5\n  return userConfig.future?.webpack5 === true /* || !userConfig.webpack */\n}\n\nexport async function loadWebpackHook(phase: string, dir: string) {\n  let useWebpack5 = false\n  const worker: any = new Worker(__filename, { enableWorkerThreads: true })\n  try {\n    useWebpack5 = Boolean(await worker.shouldLoadWithWebpack5(phase, dir))\n  } catch {\n    // If this errors, it likely will do so again upon boot, so we just swallow\n    // it here.\n  } finally {\n    worker.end()\n  }\n\n  install(useWebpack5)\n}\n"]}