{"version":3,"sources":["../../server/response-cache.ts"],"names":["ResponseCache","constructor","incrementalCache","pendingResponses","Map","get","key","responseGenerator","pendingResponse","resolver","rejecter","promise","Promise","resolve","reject","set","resolved","cacheEntry","cachedResponse","revalidate","curRevalidate","value","isStale","err","delete"],"mappings":"4DAsBe,KAAMA,CAAAA,aAAc,CAIjCC,WAAW,CAACC,gBAAD,CAAqC,MAHhDA,gBAGgD,aAFhDC,gBAEgD,QAC9C,KAAKD,gBAAL,CAAwBA,gBAAxB,CACA,KAAKC,gBAAL,CAAwB,GAAIC,CAAAA,GAAJ,EAAxB,CACD,CAEMC,GAAP,CACEC,GADF,CAEEC,iBAFF,CAG+B,CAC7B,KAAMC,CAAAA,eAAe,CAAGF,GAAG,CAAG,KAAKH,gBAAL,CAAsBE,GAAtB,CAA0BC,GAA1B,CAAH,CAAoC,IAA/D,CACA,GAAIE,eAAJ,CAAqB,CACnB,MAAOA,CAAAA,eAAP,CACD,CAED,GAAIC,CAAAA,QAAkD,CAAG,IAAM,CAAE,CAAjE,CACA,GAAIC,CAAAA,QAAgC,CAAG,IAAM,CAAE,CAA/C,CACA,KAAMC,CAAAA,OAAoC,CAAG,GAAIC,CAAAA,OAAJ,CAC3C,CAACC,OAAD,CAAUC,MAAV,GAAqB,CACnBL,QAAQ,CAAGI,OAAX,CACAH,QAAQ,CAAGI,MAAX,CACD,CAJ0C,CAA7C,CAMA,GAAIR,GAAJ,CAAS,CACP,KAAKH,gBAAL,CAAsBY,GAAtB,CAA0BT,GAA1B,CAA+BK,OAA/B,EACD,CAED,GAAIK,CAAAA,QAAQ,CAAG,KAAf,CACA,KAAMH,CAAAA,OAAO,CAAII,UAAD,EAAoC,CAClD,GAAIX,GAAJ,CAAS,CACP;AACA,KAAKH,gBAAL,CAAsBY,GAAtB,CAA0BT,GAA1B,CAA+BM,OAAO,CAACC,OAAR,CAAgBI,UAAhB,CAA/B,EACD,CACD,GAAI,CAACD,QAAL,CAAe,CACbA,QAAQ,CAAG,IAAX,CACAP,QAAQ,CAACQ,UAAD,CAAR,CACD,CACF,CAED;AACA;AACA;AAbA,CAcC,CAAC,SAAY,CACZ,GAAI,CACF,KAAMC,CAAAA,cAAc,CAAGZ,GAAG,CAAG,KAAM,MAAKJ,gBAAL,CAAsBG,GAAtB,CAA0BC,GAA1B,CAAT,CAA0C,IAApE,CACA,GAAIY,cAAJ,CAAoB,CAClBL,OAAO,CAAC,CACNM,UAAU,CAAED,cAAc,CAACE,aADrB,CAENC,KAAK,CAAEH,cAAc,CAACG,KAFhB,CAAD,CAAP,CAIA,GAAI,CAACH,cAAc,CAACI,OAApB,CAA6B,CAC3B;AACA;AACA,OACD,CACF,CAED,KAAML,CAAAA,UAAU,CAAG,KAAMV,CAAAA,iBAAiB,CAACS,QAAD,CAA1C,CACAH,OAAO,CAACI,UAAD,CAAP,CAEA,GAAIX,GAAG,EAAI,MAAOW,CAAAA,UAAU,CAACE,UAAlB,GAAiC,WAA5C,CAAyD,CACvD,KAAM,MAAKjB,gBAAL,CAAsBa,GAAtB,CACJT,GADI,CAEJW,UAAU,CAACI,KAFP,CAGJJ,UAAU,CAACE,UAHP,CAAN,CAKD,CACF,CAAC,MAAOI,GAAP,CAAY,CACZb,QAAQ,CAACa,GAAD,CAAR,CACD,CA1BD,OA0BU,CACR,GAAIjB,GAAJ,CAAS,CACP,KAAKH,gBAAL,CAAsBqB,MAAtB,CAA6BlB,GAA7B,EACD,CACF,CACF,CAhCA,IAiCD,MAAOK,CAAAA,OAAP,CACD,CA/EgC,C","sourcesContent":["import { IncrementalCache } from './incremental-cache'\n\ninterface CachedRedirectValue {\n  kind: 'REDIRECT'\n  props: Object\n}\n\ninterface CachedPageValue {\n  kind: 'PAGE'\n  html: string\n  pageData: Object\n}\n\nexport type ResponseCacheValue = CachedRedirectValue | CachedPageValue\n\nexport type ResponseCacheEntry = {\n  revalidate?: number | false\n  value: ResponseCacheValue | null\n}\n\ntype ResponseGenerator = (hasResolved: boolean) => Promise<ResponseCacheEntry>\n\nexport default class ResponseCache {\n  incrementalCache: IncrementalCache\n  pendingResponses: Map<string, Promise<ResponseCacheEntry>>\n\n  constructor(incrementalCache: IncrementalCache) {\n    this.incrementalCache = incrementalCache\n    this.pendingResponses = new Map()\n  }\n\n  public get(\n    key: string | null,\n    responseGenerator: ResponseGenerator\n  ): Promise<ResponseCacheEntry> {\n    const pendingResponse = key ? this.pendingResponses.get(key) : null\n    if (pendingResponse) {\n      return pendingResponse\n    }\n\n    let resolver: (cacheEntry: ResponseCacheEntry) => void = () => {}\n    let rejecter: (error: Error) => void = () => {}\n    const promise: Promise<ResponseCacheEntry> = new Promise(\n      (resolve, reject) => {\n        resolver = resolve\n        rejecter = reject\n      }\n    )\n    if (key) {\n      this.pendingResponses.set(key, promise)\n    }\n\n    let resolved = false\n    const resolve = (cacheEntry: ResponseCacheEntry) => {\n      if (key) {\n        // Ensure all reads from the cache get the latest value.\n        this.pendingResponses.set(key, Promise.resolve(cacheEntry))\n      }\n      if (!resolved) {\n        resolved = true\n        resolver(cacheEntry)\n      }\n    }\n\n    // We wait to do any async work until after we've added our promise to\n    // `pendingResponses` to ensure that any any other calls will reuse the\n    // same promise until we've fully finished our work.\n    ;(async () => {\n      try {\n        const cachedResponse = key ? await this.incrementalCache.get(key) : null\n        if (cachedResponse) {\n          resolve({\n            revalidate: cachedResponse.curRevalidate,\n            value: cachedResponse.value,\n          })\n          if (!cachedResponse.isStale) {\n            // The cached value is still valid, so we don't need\n            // to update it yet.\n            return\n          }\n        }\n\n        const cacheEntry = await responseGenerator(resolved)\n        resolve(cacheEntry)\n\n        if (key && typeof cacheEntry.revalidate !== 'undefined') {\n          await this.incrementalCache.set(\n            key,\n            cacheEntry.value,\n            cacheEntry.revalidate\n          )\n        }\n      } catch (err) {\n        rejecter(err)\n      } finally {\n        if (key) {\n          this.pendingResponses.delete(key)\n        }\n      }\n    })()\n    return promise\n  }\n}\n"]}