{"version":3,"sources":["../../../../telemetry/trace/report/to-zipkin.ts"],"names":["traceId","process","env","TRACE_ID","batch","localEndpoint","serviceName","ipv4","port","zipkinUrl","zipkinAPI","batcher","reportEvents","events","timeout","event","push","setTimeout","slice","length","undefined","reportToLocalHost","name","duration","timestamp","id","parentId","attrs","toString","Log","info","method","headers","body","JSON","stringify","minTimeout","retries","factor","catch","console","log","tags"],"mappings":"4DAAA,kFACA,8BACA,6DACA,sE,w4BAEA,GAAIA,CAAAA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,QAA1B,CACA,GAAIC,CAAAA,KAAJ,CAEA,KAAMC,CAAAA,aAAa,CAAG,CACpBC,WAAW,CAAE,QADO,CAEpBC,IAAI,CAAE,WAFc,CAGpBC,IAAI,CAAE,IAHc,CAAtB,CAKA,KAAMC,CAAAA,SAAS,CAAI,UAASJ,aAAa,CAACE,IAAK,IAAGF,aAAa,CAACG,IAAK,EAArE,CACA,KAAME,CAAAA,SAAS,CAAI,GAAED,SAAU,eAA/B,CAaA;AACA,QAASE,CAAAA,OAAT,CAAiBC,YAAjB,CAAwD,CACtD,KAAMC,CAAAA,MAAe,CAAG,EAAxB,CACA,GAAIC,CAAAA,OAAJ,CACA,MAAQC,CAAAA,KAAD,EAAkB,CACvBF,MAAM,CAACG,IAAP,CAAYD,KAAZ,EACA;AACA,GAAI,CAACD,OAAL,CAAc,CACZA,OAAO,CAAGG,UAAU,CAAC,IAAM,CACzBL,YAAY,CAACC,MAAM,CAACK,KAAP,EAAD,CAAZ,CACAL,MAAM,CAACM,MAAP,CAAgB,CAAhB,CACAL,OAAO,CAAGM,SAAV,CACD,CAJmB,CAIjB,IAJiB,CAApB,CAKD,CACF,CAVD,CAWD,CAED,KAAMC,CAAAA,iBAAiB,CAAG,CACxBC,IADwB,CAExBC,QAFwB,CAGxBC,SAHwB,CAIxBC,EAJwB,CAKxBC,QALwB,CAMxBC,KANwB,GAOrB,CACH,GAAI,CAAC3B,OAAL,CAAc,CACZA,OAAO,CAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,CAAuB,wBAAY,CAAZ,EAAeyB,QAAf,CAAwB,KAAxB,CAAjC,CACAC,GAAG,CAACC,IAAJ,CACG,qCAAoCrB,SAAU,kBAAiBT,OAAQ,EAD1E,EAGD,CAED,GAAI,CAACI,KAAL,CAAY,CACVA,KAAK,CAAGO,OAAO,CAAEE,MAAD,EAAY,CAC1B;AACA,wBACE,IACE;AACA,uBAAMH,SAAN,CAAiB,CACfqB,MAAM,CAAE,MADO,CAEfC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFM,CAGfC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAetB,MAAf,CAHS,CAAjB,CAHJ,CAQE,CAAEuB,UAAU,CAAE,GAAd,CAAmBC,OAAO,CAAE,CAA5B,CAA+BC,MAAM,CAAE,CAAvC,CARF,EASEC,KATF,CASQC,OAAO,CAACC,GAThB,EAUD,CAZc,CAAf,CAaD,CAEDrC,KAAK,CAAC,CACJJ,OADI,CAEJ0B,QAFI,CAGJJ,IAHI,CAIJG,EAJI,CAKJD,SALI,CAMJD,QANI,CAOJlB,aAPI,CAQJqC,IAAI,CAAEf,KARF,CAAD,CAAL,CAUD,CAzCD,C,aA2CeN,iB","sourcesContent":["import retry from 'next/dist/compiled/async-retry'\nimport { randomBytes } from 'crypto'\nimport fetch from 'node-fetch'\nimport * as Log from '../../../build/output/log'\n\nlet traceId = process.env.TRACE_ID\nlet batch: ReturnType<typeof batcher> | undefined\n\nconst localEndpoint = {\n  serviceName: 'nextjs',\n  ipv4: '127.0.0.1',\n  port: 9411,\n}\nconst zipkinUrl = `http://${localEndpoint.ipv4}:${localEndpoint.port}`\nconst zipkinAPI = `${zipkinUrl}/api/v2/spans`\n\ntype Event = {\n  traceId: string\n  parentId?: string\n  name: string\n  id: string\n  timestamp: number\n  duration: number\n  localEndpoint: typeof localEndpoint\n  tags?: Object\n}\n\n// Batch events as zipkin allows for multiple events to be sent in one go\nfunction batcher(reportEvents: (evts: Event[]) => void) {\n  const events: Event[] = []\n  let timeout: ReturnType<typeof setTimeout> | undefined\n  return (event: Event) => {\n    events.push(event)\n    // setTimeout is used instead of setInterval to ensure events sending does not block exiting the program\n    if (!timeout) {\n      timeout = setTimeout(() => {\n        reportEvents(events.slice())\n        events.length = 0\n        timeout = undefined\n      }, 1500)\n    }\n  }\n}\n\nconst reportToLocalHost = (\n  name: string,\n  duration: number,\n  timestamp: number,\n  id: string,\n  parentId?: string,\n  attrs?: Object\n) => {\n  if (!traceId) {\n    traceId = process.env.TRACE_ID = randomBytes(8).toString('hex')\n    Log.info(\n      `Zipkin trace will be available on ${zipkinUrl}/zipkin/traces/${traceId}`\n    )\n  }\n\n  if (!batch) {\n    batch = batcher((events) => {\n      // Ensure ECONNRESET error is retried 3 times before erroring out\n      retry(\n        () =>\n          // Send events to zipkin\n          fetch(zipkinAPI, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(events),\n          }),\n        { minTimeout: 500, retries: 3, factor: 1 }\n      ).catch(console.log)\n    })\n  }\n\n  batch({\n    traceId,\n    parentId,\n    name,\n    id,\n    timestamp,\n    duration,\n    localEndpoint,\n    tags: attrs,\n  })\n}\n\nexport default reportToLocalHost\n"]}